{"accuracy": 0.89, "correct_count": 356, "total_count": 400}
{"id": 14, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"function\": \"x**2\", \"interval\": [1, 3], \"method\": \"trapezoidal\"}, \"name\": \"calculate_area_under_curve\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 39, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'charge2': 0.0. Expected one of [2e-09]."], "error_type": "value_error:others", "prompt": {"id": "simple_38", "question": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "function": {"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"charge1\": 1e-9, \"charge2\": 0, \"distance\": 0.05}, \"name\": \"calculate_electrostatic_potential\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 0, "distance": 0.05}}], "possible_answer": {"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}}
{"id": 56, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'detailed'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_55", "question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"cell_type\": \"human\", \"detailed\": \"true\"}, \"name\": \"biology_get_cell_info\"}\n</tool_call>\n", "model_result_decoded": [{"biology_get_cell_info": {"cell_type": "human", "detailed": "true"}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}}
{"id": 62, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 68. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"id": "simple_61", "question": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"weight\": 150, \"height\": 68, \"activity_level\": \"lightly active\"}, \"name\": \"diabetes_prediction\"}\n</tool_call>\n", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 68, "activity_level": "lightly active"}}], "possible_answer": {"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}}
{"id": 83, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"numbers\": [12, 15, 18, 20, 21, 26, 30]}, \"name\": \"calculate_average\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"list\": [5, 3, 4, 1, 2], \"order\": \"ascending\"}, \"name\": \"array_sort\"}\n</tool_call>\n", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 92, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'operating on Sundays'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"cuisine\": \"sushi\", \"location\": \"Boston\", \"condition\": \"operating on Sundays\"}, \"name\": \"get_restaurant\"}\n</tool_call>\n", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "operating on Sundays"}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}}
{"id": 99, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"hours\": 18, \"minutes\": 30}, \"name\": \"calculate_clock_angle\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30}}], "possible_answer": {"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}}
{"id": 100, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 6.283185307. Expected one of [6.2832]."], "error_type": "value_error:others", "prompt": {"id": "simple_99", "question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"start_range\": 0, \"end_range\": 6.283185307, \"frequency\": 5}, \"name\": \"plot_sine_wave\"}\n</tool_call>\n", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 6.283185307, "frequency": 5}}], "possible_answer": {"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 102, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'to_unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_101", "question": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "function": {"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"distance\": 450, \"time\": 20}, \"name\": \"calculate_speed\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_speed": {"distance": 450, "time": 20}}], "possible_answer": {"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}}
{"id": 104, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"polynomial\": [3, 2, -4], \"limits\": [-1, 2]}, \"name\": \"mathematics_calculate_area_under_curve\"}\n</tool_call>\n", "model_result_decoded": [{"mathematics_calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 123, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_122", "question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"table\": [10, 20, 30, 40], \"alpha\": 0.05}, \"name\": \"chi_squared_test\"}\n</tool_call>\n", "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40], "alpha": 0.05}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 128, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discount_rate': 10.0. Expected one of [0.1]."], "error_type": "value_error:others", "prompt": {"id": "simple_127", "question": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "function": {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "float", "description": "The discount rate to use."}, "initial_investment": {"type": "integer", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"cash_flows\": [200, 300, 400, 500], \"discount_rate\": 10.0, \"initial_investment\": 2000}, \"name\": \"calculate_NPV\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_NPV": {"cash_flows": [200, 300, 400, 500], "discount_rate": 10.0, "initial_investment": 2000}}], "possible_answer": {"calculate_NPV": {"cash_flows": [[200, 300, 400, 500]], "discount_rate": [0.1], "initial_investment": [2000]}}}
{"id": 152, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": "Find the highest grossing bank in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"country\": \"U.S\", \"year\": 2020}, \"name\": \"highest_grossing_banks\"}\n</tool_call>\n", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_156", "question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"case_number\": \"CA123456\", \"county\": \"San Diego\"}, \"name\": \"crime_record_get_record\"}\n</tool_call>\n", "model_result_decoded": [{"crime_record_get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 159, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_158", "question": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"name\": \"Mr. X\", \"location\": \"New York\", \"from_year\": 2012, \"to_year\": 2015}, \"name\": \"get_criminal_records\"}\n</tool_call>\n", "model_result_decoded": [{"get_criminal_records": {"name": "Mr. X", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": {"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}}
{"id": 164, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'include_owner' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_163", "question": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.", "function": {"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"address\": \"123 main street\", \"parcel_number\": \"1234567890\", \"county\": \"Santa Clara\"}, \"name\": \"property_records_get\"}\n</tool_call>\n", "model_result_decoded": [{"property_records_get": {"address": "123 main street", "parcel_number": "1234567890", "county": "Santa Clara"}}], "possible_answer": {"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}}
{"id": 170, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'full_text'. Expected type boolean, got str. Parameter value: 'false'."], "error_type": "type_error:simple", "prompt": {"id": "simple_169", "question": "Find the details of the court case identified by docket number 123456 in Texas. Don't return full text", "function": {"name": "court_case.search", "description": "Retrieves details about a court case using its docket number and location.", "parameters": {"type": "dict", "properties": {"docket_number": {"type": "string", "description": "The docket number for the case."}, "location": {"type": "string", "description": "The location where the case is registered, in the format: state, e.g., Texas"}, "full_text": {"type": "boolean", "default": "false", "description": "Option to return the full text of the case ruling."}}, "required": ["docket_number", "location"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"docket_number\": \"123456\", \"location\": \"Texas\", \"full_text\": \"false\"}, \"name\": \"court_case_search\"}\n</tool_call>\n", "model_result_decoded": [{"court_case_search": {"docket_number": "123456", "location": "Texas", "full_text": "false"}}], "possible_answer": {"court_case.search": {"docket_number": ["123456"], "location": ["Texas"], "full_text": [false, ""]}}}
{"id": 177, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'case_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_176", "question": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "function": {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"company_name\": \"Apple Inc.\", \"year\": 2010}, \"name\": \"lawsuit_details_find\"}\n</tool_call>\n", "model_result_decoded": [{"lawsuit_details_find": {"company_name": "Apple Inc.", "year": 2010}}], "possible_answer": {"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent", "IPR"]}}}
{"id": 184, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_183", "question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"entity\": \"Apple\", \"county\": \"Santa Clara\"}, \"name\": \"lawsuit_search\"}\n</tool_call>\n", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 198, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '12:00:00'. Expected one of ['12pm', '12:00']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_197", "question": "Find the air quality index in San Diego at 12pm.", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"location\": \"San Diego\", \"time\": \"12:00:00\"}, \"name\": \"get_air_quality_index\"}\n</tool_call>\n", "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego", "time": "12:00:00"}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}}
{"id": 201, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_efficiency': 25.0. Expected one of ['', 20.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_200", "question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"distance\": 12000, \"fuel_type\": \"gas\", \"fuel_efficiency\": 25}, \"name\": \"calculate_emissions\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 203, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"energy_type\": \"solar\", \"usage_duration\": 3, \"region\": \"California\"}, \"name\": \"calculate_emission_savings\"}\n</tool_call>\n", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 204, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"id": "simple_203", "question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"location\": \"Chicago\", \"detail\": false}, \"name\": \"get_air_quality\"}\n</tool_call>\n", "model_result_decoded": [{"get_air_quality": {"location": "Chicago", "detail": false}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 212, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 81 (char 80)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_211", "question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"to\": \"john.doe@example.com\", \"subject\": \"Meeting\", \"body\": \"Let's meet at 10 AM tomorrow.\"}, \"name\": \"send_email\"}\n</tool_call>\n", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 216, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'extra_info'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_215", "question": "Give me a brief on movie 'Interstellar'", "function": {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"title\": \"Interstellar\", \"extra_info\": \"true\"}, \"name\": \"movie_details_brief\"}\n</tool_call>\n", "model_result_decoded": [{"movie_details_brief": {"title": "Interstellar", "extra_info": "true"}}], "possible_answer": {"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}}
{"id": 217, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 50 (char 49)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_216", "question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"text\": \"I love the food here! It's always fresh and delicious.\", \"language\": \"en\"}, \"name\": \"sentiment_analysis\"}\n</tool_call>\n", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 233, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. Expecting value: line 1 column 65 (char 64)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_232", "question": "What was the full name king of England in 1800?", "function": {"name": "monarch.getMonarchOfYear", "description": "Retrieve the monarch of a specific location during a specified year.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location (e.g., country) whose monarch needs to be found."}, "year": {"type": "integer", "description": "The year to search the monarch."}, "fullName": {"type": "boolean", "default": false, "description": "If true, returns the full name and title of the monarch."}}, "required": ["location", "year"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"location\": \"England\", \"year\": 1800, \"fullName\": True}, \"name\": \"monarch_getMonarchOfYear\"}\n</tool_call>\n", "possible_answer": {"monarch.getMonarchOfYear": {"location": ["England", "ENG"], "year": [1800], "fullName": [true]}}}
{"id": 234, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_233", "question": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "function": {"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"event_name\": \"Treaty of Tordesillas\"}, \"name\": \"european_history_get_event_date\"}\n</tool_call>\n", "model_result_decoded": [{"european_history_get_event_date": {"event_name": "Treaty of Tordesillas"}}], "possible_answer": {"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}}
{"id": 235, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'region': 'Europe'. Expected one of ['Northern', 'Southern', 'Eastern', 'Western']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_234", "question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"century\": 19, \"region\": \"Europe\", \"category\": \"Wars\"}, \"name\": \"history_eu_fetch_events\"}\n</tool_call>\n", "model_result_decoded": [{"history_eu_fetch_events": {"century": 19, "region": "Europe", "category": "Wars"}}], "possible_answer": {"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}}
{"id": 236, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Global'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": "When was the signing of the Treaty of Lisbon?", "function": {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"event\": \"Signing of the Treaty of Lisbon\", \"location\": \"Global\"}, \"name\": \"get_event_date\"}\n</tool_call>\n", "model_result_decoded": [{"get_event_date": {"event": "Signing of the Treaty of Lisbon", "location": "Global"}}], "possible_answer": {"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": [""]}}}
{"id": 240, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. Expecting value: line 1 column 43 (char 42)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_239", "question": "Who was the full name of the president of the United States in 1861?", "function": {"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"year\": 1861, \"full_name\": True}, \"name\": \"US_president_in_year\"}\n</tool_call>\n", "possible_answer": {"US_president.in_year": {"year": [1861], "full_name": [true, ""]}}}
{"id": 245, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Mathematical Principles of Natural Philosophy'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"author\": \"Isaac Newton\", \"work_title\": \"Mathematical Principles of Natural Philosophy\", \"location\": \"all\"}, \"name\": \"publication_year_find\"}\n</tool_call>\n", "model_result_decoded": [{"publication_year_find": {"author": "Isaac Newton", "work_title": "Mathematical Principles of Natural Philosophy", "location": "all"}}], "possible_answer": {"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}}
{"id": 249, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. Expecting value: line 1 column 71 (char 70)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_248", "question": "Who invented the theory of relativity and in which year?", "function": {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"invention_name\": \"theory of relativity\", \"want_year\": True}, \"name\": \"science_history_get_invention\"}\n</tool_call>\n", "possible_answer": {"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}}
{"id": 253, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'century': 1500. Expected one of [16]."], "error_type": "value_error:others", "prompt": {"id": "simple_252", "question": "Find ten major historical events related to Christianity in the 16th century sort by importance.", "function": {"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"religion\": \"Christianity\", \"century\": 1500, \"sort_by\": \"importance\", \"count\": 10}, \"name\": \"get_religion_history\"}\n</tool_call>\n", "model_result_decoded": [{"get_religion_history": {"religion": "Christianity", "century": 1500, "sort_by": "importance", "count": 10}}], "possible_answer": {"get_religion_history": {"religion": ["Christianity"], "century": [16], "sort_by": ["importance"], "count": [10]}}}
{"id": 263, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'dominant_color' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_262", "question": "Change my painting's medium to oil and change size to 12x18 with red dominant color.", "function": {"name": "modify_painting", "description": "Modify an existing painting's attributes such as size, medium, and color.", "parameters": {"type": "dict", "properties": {"size": {"type": "string", "description": "The size of the painting in inches, width by height."}, "medium": {"type": "string", "description": "The medium of the painting, such as oil, acrylic, etc."}, "dominant_color": {"type": "string", "description": "The dominant color of the painting. Default to 'black'."}}, "required": ["size", "medium"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"size\": \"12x18\", \"medium\": \"oil\"}, \"name\": \"modify_painting\"}\n</tool_call>\n", "model_result_decoded": [{"modify_painting": {"size": "12x18", "medium": "oil"}}], "possible_answer": {"modify_painting": {"size": ["12x18"], "medium": ["oil"], "dominant_color": ["red"]}}}
{"id": 265, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_264", "question": "Find the size of the sculpture with title 'David' by Michelangelo.", "function": {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"artist\": \"Michelangelo\", \"title\": \"David\"}, \"name\": \"sculpture_get_details\"}\n</tool_call>\n", "model_result_decoded": [{"sculpture_get_details": {"artist": "Michelangelo", "title": "David"}}], "possible_answer": {"sculpture.get_details": {"artist": ["Michelangelo"], "title": ["David"], "detail": ["size"]}}}
{"id": 268, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"location\": \"New York\", \"art_form\": \"sculpture\", \"month\": \"upcoming\"}, \"name\": \"find_exhibition\"}\n</tool_call>\n", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sculpture", "month": "upcoming"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 305, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': ''. Expected one of ['Los Angeles Lakers', 'LAL', 'Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_304", "question": "Get point and rebound stats for player 'LeBron James' from last basketball game", "function": {"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"player_name\": \"LeBron James\", \"team\": \"\", \"metrics\": [\"Points\", \"Rebounds\"]}, \"name\": \"player_stats_getLastGame\"}\n</tool_call>\n", "model_result_decoded": [{"player_stats_getLastGame": {"player_name": "LeBron James", "team": "", "metrics": ["Points", "Rebounds"]}}], "possible_answer": {"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}}
{"id": 309, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': 'Premier League'. Expected one of ['English Premier League', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_308", "question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"team_name\": \"Manchester United\", \"num_matches\": 5, \"league\": \"Premier League\"}, \"name\": \"sports_match_schedule\"}\n</tool_call>\n", "model_result_decoded": [{"sports_match_schedule": {"team_name": "Manchester United", "num_matches": 5, "league": "Premier League"}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}}
{"id": 343, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. Expecting value: line 1 column 53 (char 52)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_342", "question": "Find all multi-player games released in 2019 with an ESRB rating of 'Everyone'", "function": {"name": "game_list.get_games", "description": "Get a list of video games based on release year, multiplayer functionality and ESRB rating", "parameters": {"type": "dict", "properties": {"release_year": {"type": "integer", "description": "The year the game was released."}, "multiplayer": {"type": "boolean", "description": "Whether the game has multiplayer functionality."}, "ESRB_rating": {"type": "string", "description": "The ESRB rating of the game."}}, "required": ["release_year", "multiplayer", "ESRB_rating"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"release_year\": 2019, \"multiplayer\": True, \"ESRB_rating\": \"Everyone\"}, \"name\": \"game_list_get_games\"}\n</tool_call>\n", "possible_answer": {"game_list.get_games": {"release_year": [2019], "multiplayer": [true], "ESRB_rating": ["Everyone"]}}}
{"id": 371, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_370", "question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"location\": \"Palo Alto\", \"items\": [\"olive oil\"], \"quantity\": [3]}, \"name\": \"safeway_order\"}\n</tool_call>\n<tool_call>\n{\"arguments\": {\"location\": \"Palo Alto\", \"items\": [\"rice\"], \"quantity\": [1]}, \"name\": \"safeway_order\"}\n</tool_call>\n", "model_result_decoded": [{"safeway_order": {"location": "Palo Alto", "items": ["olive oil"], "quantity": [3]}}, {"safeway_order": {"location": "Palo Alto", "items": ["rice"], "quantity": [1]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"loc\": \"San Jose\", \"product_list\": [\"apples\", \"rice\", \"12 pack bottled water\"], \"pack_size\": [1, 5, 12]}, \"name\": \"walmart_purchase\"}\n</tool_call>\n", "model_result_decoded": [{"walmart_purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack bottled water"], "pack_size": [1, 5, 12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "NousResearch_Hermes-2-Pro-Llama-3-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'egg']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "<tool_call>\n{\"arguments\": {\"items\": [\"pumpkin\"], \"quantities\": [3]}, \"name\": \"walmart_check_price\"}\n</tool_call>\n", "model_result_decoded": [{"walmart_check_price": {"items": ["pumpkin"], "quantities": [3]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}