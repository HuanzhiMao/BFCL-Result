{"accuracy": 0.9025, "correct_count": 361, "total_count": 400}
{"id": 14, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': 'y = x**2'. Expected one of ['x^2', 'x**2']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": [{"calculate_area_under_curve": "{\"function\": \"y = x**2\", \"interval\": [1, 3], \"method\": \"trapezoidal\"}"}], "model_result_decoded": [{"calculate_area_under_curve": {"function": "y = x**2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 15, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'x_value': 2.0. Expected one of ['', 0.0]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the derivative of the function 3x^2 + 2x - 1.", "function": {"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "float", "description": "The x-value at which the derivative is calculated. Optional, default to 0.00."}}, "required": ["function"]}}}, "model_result_raw": [{"calculate_derivative": "{\"function\": \"3x**2 + 2x - 1\", \"x_value\": 2.0}"}], "model_result_decoded": [{"calculate_derivative": {"function": "3x**2 + 2x - 1", "x_value": 2.0}}], "possible_answer": {"calculate_derivative": {"function": ["3x^2 + 2x - 1", "3*x**2+2*x-1"], "x_value": ["", 0.0]}}}
{"id": 36, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}}, "model_result_raw": [{"vegan_restaurant.find_nearby": "{\"location\": \"New York\", \"operating_hours\": 11}"}], "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York", "operating_hours": 11}}], "possible_answer": {"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}}
{"id": 43, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'capacitance': 0.1. Expected one of [0.0001]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "function": {"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}}, "model_result_raw": [{"calculate_resonant_frequency": "{\"inductance\": 0.05, \"capacitance\": 0.1, \"round_off\": 2}"}], "model_result_decoded": [{"calculate_resonant_frequency": {"inductance": 0.05, "capacitance": 0.1, "round_off": 2}}], "possible_answer": {"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}}
{"id": 52, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'isothermal': False. Expected one of ['', True]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K.", "function": {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "dict", "properties": {"initial_temp": {"type": "integer", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "integer", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "integer", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}}, "model_result_raw": [{"calculate_entropy_change": "{\"initial_temp\": 300, \"final_temp\": 400, \"heat_capacity\": 5, \"isothermal\": false}"}], "model_result_decoded": [{"calculate_entropy_change": {"initial_temp": 300, "final_temp": 400, "heat_capacity": 5, "isothermal": false}}], "possible_answer": {"calculate_entropy_change": {"initial_temp": [300], "final_temp": [400], "heat_capacity": [5], "isothermal": ["", true]}}}
{"id": 56, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": [{"biology.get_cell_info": "{\"cell_type\": \"human cell\", \"detailed\": true}"}], "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}}
{"id": 83, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": [{"calculate_average": "{\"numbers\": [12, 15, 18, 20, 21, 26, 30]}"}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": [{"array_sort": "{\"list\": [5, 3, 4, 1, 2], \"order\": \"ascending\"}"}], "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 99, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}}, "model_result_raw": [{"calculate_clock_angle": "{\"hours\": 18, \"minutes\": 30, \"round_to\": 2}"}], "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30, "round_to": 2}}], "possible_answer": {"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}}
{"id": 100, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 2.0. Expected one of [6.2832]."], "error_type": "value_error:others", "prompt": {"question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": [{"plot_sine_wave": "{\"start_range\": 0, \"end_range\": 2, \"frequency\": 5}"}], "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 2, "frequency": 5}}], "possible_answer": {"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 104, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": [{"mathematics.calculate_area_under_curve": "{\"polynomial\": [3, 2, -4], \"limits\": [-1, 2]}"}], "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 123, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": [{"chi_squared_test": "{\"table\": [10, 20, 30, 40], \"alpha\": 0.05}"}], "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40], "alpha": 0.05}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 128, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discount_rate': 10.0. Expected one of [0.1]."], "error_type": "value_error:others", "prompt": {"question": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "function": {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "float", "description": "The discount rate to use."}, "initial_investment": {"type": "integer", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}}, "model_result_raw": [{"calculate_NPV": "{\"cash_flows\": [200, 300, 400, 500], \"discount_rate\": 10, \"initial_investment\": 2000}"}], "model_result_decoded": [{"calculate_NPV": {"cash_flows": [200, 300, 400, 500], "discount_rate": 10, "initial_investment": 2000}}], "possible_answer": {"calculate_NPV": {"cash_flows": [[200, 300, 400, 500]], "discount_rate": [0.1], "initial_investment": [2000]}}}
{"id": 130, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discount_rate': 4.0. Expected one of [0.04]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%.", "function": {"name": "calculate_discounted_cash_flow", "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.", "parameters": {"type": "dict", "properties": {"coupon_payment": {"type": "integer", "description": "The annual coupon payment."}, "period": {"type": "integer", "description": "The time frame in years for which coupon payment is made."}, "discount_rate": {"type": "float", "description": "The discount rate."}, "face_value": {"type": "integer", "description": "The face value of the bond, default is 1000."}}, "required": ["coupon_payment", "period", "discount_rate"]}}}, "model_result_raw": [{"calculate_discounted_cash_flow": "{\"coupon_payment\": 100, \"period\": 5, \"discount_rate\": 4}"}], "model_result_decoded": [{"calculate_discounted_cash_flow": {"coupon_payment": 100, "period": 5, "discount_rate": 4}}], "possible_answer": {"calculate_discounted_cash_flow": {"coupon_payment": [100], "period": [5], "discount_rate": [0.04], "face_value": ["", 1000]}}}
{"id": 135, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_return': 7.0. Expected one of [0.07]."], "error_type": "value_error:others", "prompt": {"question": "Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%.", "function": {"name": "investment.predictProfit", "description": "Predict the profit for given investment after specified number of years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount invested in dollars."}, "annual_return": {"type": "float", "description": "The annual return rate of the investment."}, "years": {"type": "integer", "description": "The time period in years for which the investment is made."}}, "required": ["investment_amount", "annual_return", "years"]}}}, "model_result_raw": [{"investment.predictProfit": "{\"investment_amount\": 5000, \"annual_return\": 7, \"years\": 5}"}], "model_result_decoded": [{"investment.predictProfit": {"investment_amount": 5000, "annual_return": 7, "years": 5}}], "possible_answer": {"investment.predictProfit": {"investment_amount": [5000], "annual_return": [0.07], "years": [5]}}}
{"id": 146, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'interest_rate': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.", "function": {"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given principal, interest rate, and period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial principal."}, "interest_rate": {"type": "float", "description": "The annual interest rate."}, "period": {"type": "integer", "description": "The period in years."}, "compounding_frequency": {"type": "string", "description": "The frequency of compounding per year. Defaults to 'Annually'.", "enum": ["Annually", "Semiannually", "Quarterly", "Monthly", "Daily"]}}, "required": ["principal", "interest_rate", "period"]}}}, "model_result_raw": [{"calculate_compounded_interest": "{\"principal\": 5000, \"interest_rate\": 5, \"period\": 10}"}], "model_result_decoded": [{"calculate_compounded_interest": {"principal": 5000, "interest_rate": 5, "period": 10}}], "possible_answer": {"calculate_compounded_interest": {"principal": [5000], "interest_rate": [0.05], "period": [10], "compounding_frequency": ["Annually", ""]}}}
{"id": 149, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rate_of_return': 8.0. Expected one of [0.08]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "function": {"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "rate_of_return": {"type": "float", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "integer", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}}, "model_result_raw": [{"finance.calculate_future_value": "{\"initial_investment\": 20000, \"rate_of_return\": 8, \"years\": 5}"}], "model_result_decoded": [{"finance.calculate_future_value": {"initial_investment": 20000, "rate_of_return": 8, "years": 5}}], "possible_answer": {"finance.calculate_future_value": {"initial_investment": [20000], "rate_of_return": [0.08], "years": [5], "contribution": ["", 0]}}}
{"id": 151, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 3.0. Expected one of [0.03]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "function": {"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}}, "model_result_raw": [{"calculate_roi": "{\"deposit\": 1000, \"annual_interest_rate\": 3, \"years\": 1}"}], "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3, "years": 1}}], "possible_answer": {"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}}
{"id": 167, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": [{"lawyer.find_nearby": "{\"city\": \"Chicago\", \"specialty\": [\"Divorce\"], \"fee\": 400}"}], "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": ["Divorce"], "fee": 400}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}}
{"id": 174, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Optional parameter 'judicial_system' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "function": {"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}}, "model_result_raw": [{"law_case_search": "{\"topic\": \"land disputes\", \"year_range\": [2015, 2021], \"location\": \"New York\"}"}], "model_result_decoded": [{"law_case_search": {"topic": "land disputes", "year_range": [2015, 2021], "location": "New York"}}], "possible_answer": {"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}}
{"id": 184, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": [{"lawsuit_search": "{\"entity\": \"Apple\", \"county\": \"Santa Clara\", \"state\": \"California\"}"}], "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara", "state": "California"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 195, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'slope_type': 'hill slope'. Expected one of ['hill', 'steep', 'moderate']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the top three plants suitable for a hill slope in terms of erosion prevention?", "function": {"name": "get_plants_for_slope", "description": "Retrieve the list of plants suitable for slope based on erosion control ability.", "parameters": {"type": "dict", "properties": {"slope_type": {"type": "string", "description": "The type of slope like steep, moderate etc."}, "num_results": {"type": "integer", "description": "The number of top results needed. Default is 5."}}, "required": ["slope_type", "num_results"]}}}, "model_result_raw": [{"get_plants_for_slope": "{\"slope_type\": \"hill slope\", \"num_results\": 3}"}], "model_result_decoded": [{"get_plants_for_slope": {"slope_type": "hill slope", "num_results": 3}}], "possible_answer": {"get_plants_for_slope": {"slope_type": ["hill", "steep", "moderate"], "num_results": [3]}}}
{"id": 201, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_efficiency': 25.0. Expected one of ['', 20.0]."], "error_type": "value_error:others", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": [{"calculate_emissions": "{\"distance\": 12000, \"fuel_type\": \"gas\", \"fuel_efficiency\": 25}"}], "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 203, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'renewable energy sources'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": [{"calculate_emission_savings": "{\"energy_type\": \"renewable energy sources\", \"usage_duration\": 3, \"region\": \"California\"}"}], "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "renewable energy sources", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 234, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "function": {"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}}, "model_result_raw": [{"european_history.get_event_date": "{\"event_name\": \"Treaty of Tordesillas\"}"}], "model_result_decoded": [{"european_history.get_event_date": {"event_name": "Treaty of Tordesillas"}}], "possible_answer": {"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}}
{"id": 240, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Who was the full name of the president of the United States in 1861?", "function": {"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}}, "model_result_raw": "The full name of the U.S. president in 1861 was Abraham Lincoln.", "possible_answer": {"US_president.in_year": {"year": [1861], "full_name": [true, ""]}}}
{"id": 244, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': 'the neutron'. Expected one of ['neutron']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who discovered the neutron? Give me detail information.", "function": {"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}}, "model_result_raw": [{"get_discoverer": "{\"discovery\": \"the neutron\", \"detail\": true}"}], "model_result_decoded": [{"get_discoverer": {"discovery": "the neutron", "detail": true}}], "possible_answer": {"get_discoverer": {"discovery": ["neutron"], "detail": [true]}}}
{"id": 248, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'category': 'Physics'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}}, "model_result_raw": [{"historical_contrib.get_contrib": "{\"scientist\": \"Albert Einstein\", \"date\": \"1915-03-17\", \"category\": \"Physics\"}"}], "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "Albert Einstein", "date": "1915-03-17", "category": "Physics"}}], "possible_answer": {"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}}
{"id": 250, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": [{"religion.history_info": "{\"religion\": \"Christianity\", \"till_century\": 14, \"include_people\": true}"}], "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}}
{"id": 268, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": [{"find_exhibition": "{\"location\": \"New York\", \"art_form\": \"modern sculpture\", \"month\": \"upcoming\", \"user_ratings\": \"high\"}"}], "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "modern sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 270, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'interest_rate': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the compound interest of an investment of $10,000 at an interest rate of 5% compounded yearly for 10 years.", "function": {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "integer", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}}, "model_result_raw": [{"calculate_compound_interest": "{\"principle\": 10000, \"interest_rate\": 5, \"time\": 10, \"compounds_per_year\": 1}"}], "model_result_decoded": [{"calculate_compound_interest": {"principle": 10000, "interest_rate": 5, "time": 10, "compounds_per_year": 1}}], "possible_answer": {"calculate_compound_interest": {"principle": [10000], "interest_rate": [0.05], "time": [10], "compounds_per_year": [1, ""]}}}
{"id": 292, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C major'. Expected one of ['C']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "function": {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}}, "model_result_raw": [{"music_generator.generate_melody": "{\"key\": \"C major\", \"start_note\": \"C4\", \"length\": 16, \"tempo\": 120}"}], "model_result_decoded": [{"music_generator.generate_melody": {"key": "C major", "start_note": "C4", "length": 16, "tempo": 120}}], "possible_answer": {"music_generator.generate_melody": {"key": ["C"], "start_note": ["C4"], "length": [16], "tempo": [120, ""]}}}
{"id": 310, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Tampa Bay Buccaneers'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the record of Tom Brady in the 2020 NFL season.", "function": {"name": "nfl_data.player_record", "description": "Retrieve the record of an NFL player in a specified season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the NFL player."}, "season_year": {"type": "integer", "description": "The year of the NFL season."}, "team": {"type": "string", "description": "The NFL team that the player played for in that season. Default is all teams if not specified."}}, "required": ["player_name", "season_year"]}}}, "model_result_raw": [{"nfl_data.player_record": "{\"player_name\": \"Tom Brady\", \"season_year\": 2020, \"team\": \"Tampa Bay Buccaneers\"}"}], "model_result_decoded": [{"nfl_data.player_record": {"player_name": "Tom Brady", "season_year": 2020, "team": "Tampa Bay Buccaneers"}}], "possible_answer": {"nfl_data.player_record": {"player_name": ["Tom Brady"], "season_year": [2020], "team": [""]}}}
{"id": 367, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'from_unit': 'tablespoons'. Expected one of ['tablespoon', 'tbsp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many teaspoons are in 2 tablespoons for measurement in my recipe?", "function": {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 1."}}, "required": ["value", "from_unit", "to_unit"]}}}, "model_result_raw": [{"recipe.unit_conversion": "{\"value\": 2, \"from_unit\": \"tablespoons\", \"to_unit\": \"teaspoons\"}"}], "model_result_decoded": [{"recipe.unit_conversion": {"value": 2, "from_unit": "tablespoons", "to_unit": "teaspoons"}}], "possible_answer": {"recipe.unit_conversion": {"value": [2], "from_unit": ["tablespoon", "tbsp"], "to_unit": ["teaspoon", "tsp"], "precision": [1, ""]}}}
{"id": 368, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}}, "model_result_raw": [{"find_recipe": "{\"dietary_restrictions\": \"vegan\", \"recipe_type\": \"brownies\", \"time\": 30}"}], "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": {"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}}
{"id": 371, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": [{"safeway.order": "{\"location\": \"Palo Alto, CA\", \"items\": [\"olive oil\", \"rice\"], \"quantity\": [3, 5]}"}], "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 376, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkins', 'dozen eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'egg']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": [{"walmart.check_price": "{\"items\": [\"pumpkins\", \"dozen eggs\"], \"quantities\": [3, 2]}"}], "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "dozen eggs"], "quantities": [3, 2]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 392, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'British pounds'. Expected one of ['GBP']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.", "function": {"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "float", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}}, "model_result_raw": [{"get_exchange_rate_with_fee": "{\"base_currency\": \"British pounds\", \"target_currency\": \"Japanese yen\", \"fee\": 0.02}"}], "model_result_decoded": [{"get_exchange_rate_with_fee": {"base_currency": "British pounds", "target_currency": "Japanese yen", "fee": 0.02}}], "possible_answer": {"get_exchange_rate_with_fee": {"base_currency": ["GBP"], "target_currency": ["JPY"], "fee": [0.02]}}}
{"id": 394, "model_name": "firefunction-v1-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How much will 20000 Japanese Yen be in United States Dollar?", "function": {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": [{"convert_currency": "{\"base_currency\": \"Japanese Yen\", \"target_currency\": \"United States Dollar\", \"amount\": 20000}"}], "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": {"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}}