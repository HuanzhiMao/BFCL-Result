{"accuracy": 0.895, "correct_count": 358, "total_count": 400}
{"id": 14, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": [{"calculate_area_under_curve": "{\"function\": \"x**2\", \"interval\": [1, 3]}"}], "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 36, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operating_hours': 11. Expected one of [23]."], "error_type": "value_error:others", "prompt": {"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}}, "model_result_raw": [{"vegan_restaurant_find_nearby": "{\"location\": \"New York, NY\", \"operating_hours\": 11}"}], "model_result_decoded": [{"vegan_restaurant_find_nearby": {"location": "New York, NY", "operating_hours": 11}}], "possible_answer": {"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}}
{"id": 56, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": [{"biology_get_cell_info": "{\"cell_type\": \"human cell\", \"detailed\": true}"}], "model_result_decoded": [{"biology_get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}}
{"id": 59, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'specific_function': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"question": "What is the function of ATP synthase in mitochondria?", "function": {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}}, "model_result_raw": [{"cell_biology_function_lookup": "{\"molecule\": \"ATP synthase\", \"organelle\": \"mitochondria\", \"specific_function\": false}"}], "model_result_decoded": [{"cell_biology_function_lookup": {"molecule": "ATP synthase", "organelle": "mitochondria", "specific_function": false}}], "possible_answer": {"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}}
{"id": 80, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'create_histogram' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5.", "function": {"name": "create_histogram", "description": "Create a histogram based on provided data.", "parameters": {"type": "dict", "properties": {"data": {"type": "array", "items": {"type": "integer"}, "description": "The data for which histogram needs to be plotted."}, "bins": {"type": "integer", "description": "The number of equal-width bins in the range. Default is 10."}}, "required": ["data", "bins"]}}}, "model_result_raw": [{"[{": "{\"data\": [85, 90, 88, 92, 86, 89, 91]}"}], "model_result_decoded": [{"[{": {"data": [85, 90, 88, 92, 86, 89, 91]}}], "possible_answer": {"create_histogram": {"data": [[85, 90, 88, 92, 86, 89, 91]], "bins": [5]}}}
{"id": 83, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": [{"calculate_average": "{\"numbers\": [12, 15, 18, 20, 21, 26, 30]}"}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": [{"array_sort": "{\"list\": [5, 3, 4, 1, 2], \"order\": \"ascending\"}"}], "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 100, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 6.283185307179586. Expected one of [6.2832]."], "error_type": "value_error:others", "prompt": {"question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": [{"plot_sine_wave": "{\"start_range\": 0, \"end_range\": 6.283185307179586, \"frequency\": 5, \"amplitude\": 1, \"phase_shift\": 0}"}], "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 6.283185307179586, "frequency": 5, "amplitude": 1, "phase_shift": 0}}], "possible_answer": {"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 104, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": [{"mathematics_calculate_area_under_curve": "{\"polynomial\": [3, 2, -4], \"limits\": [-1, 2]}"}], "model_result_decoded": [{"mathematics_calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 123, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": [{"chi_squared_test": "{\"table\": [10, 20, 30, 40]}"}], "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40]}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 157, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'San Diego County'. Expected one of ['San Diego']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": [{"crime_record_get_record": "{\"case_number\": \"CA123456\", \"county\": \"San Diego County\", \"details\": true}"}], "model_result_decoded": [{"crime_record_get_record": {"case_number": "CA123456", "county": "San Diego County", "details": true}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 178, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'open'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": [{"get_lawsuit_cases": "{\"company_name\": \"Facebook\", \"year\": 2018, \"status\": \"open\"}"}], "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "open"}}], "possible_answer": {"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}}
{"id": 184, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": [{"lawsuit_search": "{\"entity\": \"Apple\", \"county\": \"Santa Clara\", \"state\": \"California\"}"}], "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara", "state": "California"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 201, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_efficiency': 25.0. Expected one of ['', 20.0]."], "error_type": "value_error:others", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": [{"calculate_emissions": "{\"distance\": 12000, \"fuel_type\": \"gas\", \"fuel_efficiency\": 25, \"efficiency_reduction\": 0}"}], "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25, "efficiency_reduction": 0}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 203, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'renewable energy sources'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": [{"calculate_emission_savings": "{\"energy_type\": \"renewable energy sources\", \"usage_duration\": 3, \"region\": \"California\"}"}], "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "renewable energy sources", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 204, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": [{"get_air_quality": "{\"location\": \"Chicago\"}"}], "model_result_decoded": [{"get_air_quality": {"location": "Chicago"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 210, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'facilities': ['Wi-Fi', 'Fiction', 'Fiction']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi.", "function": {"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}}, "model_result_raw": [{"public_library_find_nearby": "{\"location\": \"Boston, MA\", \"facilities\": [\"Wi-Fi\", \"Fiction\", \"Fiction\"]}"}], "model_result_decoded": [{"public_library_find_nearby": {"location": "Boston, MA", "facilities": ["Wi-Fi", "Fiction", "Fiction"]}}], "possible_answer": {"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}}
{"id": 211, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'get_news' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Get 5 latest news on Bitcoin in US", "function": {"name": "get_news", "description": "Fetches the latest news on a specific topic.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject for the news topic."}, "quantity": {"type": "integer", "description": "Number of articles to fetch."}, "region": {"type": "string", "description": "The geographical region for the news. Default is 'US'."}}, "required": ["topic", "quantity"]}}}, "model_result_raw": [{"[{": "{\"topic\": \"Bitcoin\", \"quantity\": 5, \"region\": \"US\"}"}], "model_result_decoded": [{"[{": {"topic": "Bitcoin", "quantity": 5, "region": "US"}}], "possible_answer": {"get_news": {"topic": ["Bitcoin"], "quantity": [5], "region": ["US", ""]}}}
{"id": 212, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'body': 'Lets meet at 10 AM tomorrow'. Expected one of [\"Let's meet at 10 AM tomorrow\", \"Let's meet at 10 AM tomorrow.\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": [{"send_email": "{\"to\": \"john.doe@example.com\", \"subject\": \"Meeting\", \"body\": \"Lets meet at 10 AM tomorrow\"}"}], "model_result_decoded": [{"send_email": {"to": "john.doe@example.com", "subject": "Meeting", "body": "Lets meet at 10 AM tomorrow"}}], "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 217, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'text': 'I love the food here! Its always fresh and delicious. '. Expected one of [\"I love the food here! It's always fresh and delicious.\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": [{"sentiment_analysis": "{\"text\": \"I love the food here! Its always fresh and delicious. \", \"language\": \"English\"}"}], "model_result_decoded": [{"sentiment_analysis": {"text": "I love the food here! Its always fresh and delicious. ", "language": "English"}}], "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 237, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'us_history_get_event_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Get start date on the American Civil War.", "function": {"name": "us_history.get_event_info", "description": "Retrieve detailed information about a significant event in U.S. history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "specific_info": {"type": "string", "description": "Specific aspect of information related to event.", "enum": ["Start Date", "End Date", "Participants", "Result", "Notable Figures", "Importance in History"]}}, "required": ["event_name", "specific_info"]}}}, "model_result_raw": [{"us_history_get_event_event": "{\"event_name\": \"American Civil War\", \"specific_info\": \"Start Date\"}"}], "model_result_decoded": [{"us_history_get_event_event": {"event_name": "American Civil War", "specific_info": "Start Date"}}], "possible_answer": {"us_history.get_event_info": {"event_name": ["American Civil War", "Civil War"], "specific_info": ["Start Date"]}}}
{"id": 248, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'historical_contrib_get_contrib' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}}, "model_result_raw": [{"[{": "{\" :) \": {\"scientist\": \"Albert Einstein\", \"date\": \"1915-03-17\"}}"}], "model_result_decoded": [{"[{": {" :) ": {"scientist": "Albert Einstein", "date": "1915-03-17"}}}], "possible_answer": {"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}}
{"id": 268, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": [{"find_exhibition": "{\"location\": \"New York City, NY\", \"art_form\": \"modern sculpture\", \"user_ratings\": \"high\", \"month\": \"upcoming\"}"}], "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "modern sculpture", "user_ratings": "high", "month": "upcoming"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 270, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'interest_rate': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the compound interest of an investment of $10,000 at an interest rate of 5% compounded yearly for 10 years.", "function": {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "integer", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}}, "model_result_raw": [{"calculate_compound_interest": "{\"principle\": 10000, \"interest_rate\": 5, \"time\": 10, \"compounds_per_year\": 1}"}], "model_result_decoded": [{"calculate_compound_interest": {"principle": 10000, "interest_rate": 5, "time": 10, "compounds_per_year": 1}}], "possible_answer": {"calculate_compound_interest": {"principle": [10000], "interest_rate": [0.05], "time": [10], "compounds_per_year": [1, ""]}}}
{"id": 294, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'music_composer_create_mix' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.", "function": {"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "dict", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}}, "model_result_raw": [{"[{": "{\"scale\": \"C major\", \"note_duration\": \"quarter\", \"track_length\": 180}"}], "model_result_decoded": [{"[{": {"scale": "C major", "note_duration": "quarter", "track_length": 180}}], "possible_answer": {"music_composer.create_mix": {"scale": ["C Major"], "note_duration": ["quarter"], "track_length": [180]}}}
{"id": 296, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'get_song_lyrics' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "function": {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}}, "model_result_raw": [{"[{": "{\"song_title\": \"Bohemian Rhapsody\", \"artist_name\": \"Queen\"}"}], "model_result_decoded": [{"[{": {"song_title": "Bohemian Rhapsody", "artist_name": "Queen"}}], "possible_answer": {"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}}
{"id": 298, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"question": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])", "function": {"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}}, "model_result_raw": [{"music_theory_chordProgression": "{\"progression\": [\"I\", \"V\", \"vi\", \"IV\"]}"}, {"music_theory_chordProgression": "{\"progression\": [\"I\", \"V\", \"vi\", \"IV\"], \"assumeMajor\": true}"}], "model_result_decoded": [{"music_theory_chordProgression": {"progression": ["I", "V", "vi", "IV"]}}, {"music_theory_chordProgression": {"progression": ["I", "V", "vi", "IV"], "assumeMajor": true}}], "possible_answer": {"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}}
{"id": 306, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"question": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "function": {"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}}, "model_result_raw": [{"sports_stats_get_performance": "{\"player_name\": \"Messi\", \"tournament\": \"La Liga\"}"}, {"sports_stats_get_performance": "{\"player_name\": \"Messi\", \"tournament\": \"La Liga\", \"season\": \"2020-2021\", \"performance_indicator\": [\"Goals Scored\", \"Assists Made\"]}"}], "model_result_decoded": [{"sports_stats_get_performance": {"player_name": "Messi", "tournament": "La Liga"}}, {"sports_stats_get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["Goals Scored", "Assists Made"]}}], "possible_answer": {"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}}
{"id": 308, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"question": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "function": {"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}}, "model_result_raw": [{"game_result_get_winner": "{\"teams\": [\"Lakers\", \"Clippers\"]}"}, {"game_result_get_winner": "{\"date\": \"2021-01-28\"}"}], "model_result_decoded": [{"game_result_get_winner": {"teams": ["Lakers", "Clippers"]}}, {"game_result_get_winner": {"date": "2021-01-28"}}], "possible_answer": {"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}}
{"id": 317, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'female'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the current world rank of a Tennis player, Serena Williams.", "function": {"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}}, "model_result_raw": [{"get_sport_ranking": "{\"sport\": \"Tennis\", \"player_name\": \"Serena Williams\", \"gender\": \"female\"}"}], "model_result_decoded": [{"get_sport_ranking": {"sport": "Tennis", "player_name": "Serena Williams", "gender": "female"}}], "possible_answer": {"get_sport_ranking": {"sport": ["Tennis"], "player_name": ["Serena Williams"], "gender": ["", "all"]}}}
{"id": 323, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': '2021-22'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the current ranking for Liverpool Football Club in the Premier League.", "function": {"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}}, "model_result_raw": [{"sports_ranking_get_current": "{\"team\": \"Liverpool Football Club\", \"league\": \"Premier League\", \"season\": \"2021-22\"}"}], "model_result_decoded": [{"sports_ranking_get_current": {"team": "Liverpool Football Club", "league": "Premier League", "season": "2021-22"}}], "possible_answer": {"sports_ranking.get_current": {"team": ["Liverpool Football Club", "Liverpool", "LFC"], "league": ["Premier League", "EPL", "English Premier League"], "season": [""]}}}
{"id": 338, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": [{"poker_game_winner": "{\"players\": [\"Alex\", \"Sam\", \"Robert\", \"Steve\"]}"}, {"poker_game_winner": "{\"cards\": {\"Alex\": [\"A of spades\", \"K of spades\"], \"Sam\": [\"2 of diamonds\", \"3 of clubs\"], \"Robert\": [\"Q of hearts\", \"10 of hearts\"], \"Steve\": [\"4 of spades\", \"5 of spades\"]}}"}, {"poker_game_winner": "{\"type\": \"Texas Holdem\"}"}], "model_result_decoded": [{"poker_game_winner": {"players": ["Alex", "Sam", "Robert", "Steve"]}}, {"poker_game_winner": {"cards": {"Alex": ["A of spades", "K of spades"], "Sam": ["2 of diamonds", "3 of clubs"], "Robert": ["Q of hearts", "10 of hearts"], "Steve": ["4 of spades", "5 of spades"]}}}, {"poker_game_winner": {"type": "Texas Holdem"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}}
{"id": 349, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"question": "Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5.", "function": {"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}}, "model_result_raw": [{"[{": "{\"player_name\": \"StarPlayer\", \"_class\": \"Mage\", \"starting_level\": 5}"}, {"create_player_profile": "{\"player_name\": \"StarPlayer\", \"_class\": \"Mage\", \"starting_level\": 5}"}], "model_result_decoded": [{"[{": {"player_name": "StarPlayer", "_class": "Mage", "starting_level": 5}}, {"create_player_profile": {"player_name": "StarPlayer", "_class": "Mage", "starting_level": 5}}], "possible_answer": {"create_player_profile": {"player_name": ["StarPlayer"], "_class": ["Mage"], "starting_level": [5]}}}
{"id": 351, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'get_highest_scoring_player' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Get the highest scoring player of game 'Valorant' in 2022 season.", "function": {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}}, "required": ["game", "season"]}}}, "model_result_raw": [{"[{": "{\"game\": \"Valorant\", \"season\": \"2022\"}"}], "model_result_decoded": [{"[{": {"game": "Valorant", "season": "2022"}}], "possible_answer": {"get_highest_scoring_player": {"game": ["Valorant"], "season": ["2022", "2022 season"]}}}
{"id": 352, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'multiplayer_game_finder' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "function": {"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}}, "model_result_raw": [{"[{": "{\"platform\": \"Windows 10\", \"rating\": 4.5}"}], "model_result_decoded": [{"[{": {"platform": "Windows 10", "rating": 4.5}}], "possible_answer": {"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": ["", "Action"]}}}
{"id": 353, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Function name 'gamespot_getAverageUserScore' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.", "function": {"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}}, "model_result_raw": [{"[{": "{\"game_name\": \"The Legend of Zelda: Breath of the Wild\", \"platform\": \"Nintendo Switch\"}"}], "model_result_decoded": [{"[{": {"game_name": "The Legend of Zelda: Breath of the Wild", "platform": "Nintendo Switch"}}], "possible_answer": {"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}}
{"id": 367, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'precision': 0. Expected one of [1, '']."], "error_type": "value_error:others", "prompt": {"question": "How many teaspoons are in 2 tablespoons for measurement in my recipe?", "function": {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 1."}}, "required": ["value", "from_unit", "to_unit"]}}}, "model_result_raw": [{"recipe_unit_conversion": "{\"value\": 2, \"from_unit\": \"tablespoon\", \"to_unit\": \"teaspoon\", \"precision\": 0}"}], "model_result_decoded": [{"recipe_unit_conversion": {"value": 2, "from_unit": "tablespoon", "to_unit": "teaspoon", "precision": 0}}], "possible_answer": {"recipe.unit_conversion": {"value": [2], "from_unit": ["tablespoon", "tbsp"], "to_unit": ["teaspoon", "tsp"], "precision": [1, ""]}}}
{"id": 368, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}}, "model_result_raw": [{"find_recipe": "{\"dietary_restrictions\": \"vegan\", \"recipe_type\": \"brownies\", \"time\": 30}"}], "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": {"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}}
{"id": 371, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": [{"safeway_order": "{\"location\": \"Palo Alto, CA\", \"items\": [\"olive oil\", \"rice\"], \"quantity\": [3, 5]}"}], "model_result_decoded": [{"safeway_order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'pack_size'. Expected outer type array with inner type <class 'int'>. Parameter value: [None, None, 12]."], "error_type": "type_error:nested", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": [{"walmart_purchase": "{\"loc\": \"San Jose\", \"product_list\": [\"apples\", \"rice\", \"bottled water\"], \"pack_size\": [null, null, 12]}"}], "model_result_decoded": [{"walmart_purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [null, null, 12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'store_location': ''. Expected one of ['Los Angeles', 'LA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": [{"walmart_check_price": "{\"items\": [\"pumpkins\", \"eggs\"], \"quantities\": [3, 24], \"store_location\": \"\"}"}], "model_result_decoded": [{"walmart_check_price": {"items": ["pumpkins", "eggs"], "quantities": [3, 24], "store_location": ""}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 383, "model_name": "mistral-large-2402-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'single room'. Expected one of ['single']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": [{"book_hotel": "{\"hotel_name\": \"Hilton Hotel\", \"location\": \"Chicago\", \"room_type\": \"single room\", \"start_date\": \"10th December 2022\", \"nights\": 2}"}], "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single room", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}