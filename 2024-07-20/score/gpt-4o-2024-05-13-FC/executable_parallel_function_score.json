{"accuracy": 0.82, "correct_count": 41, "total_count": 50}
{"id": 12, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [1, 2, 3] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Wrong execution result for \"convert_currency(amount=5000,from_currency='JPY',to_currency='EUR')\". Expected: 1.7740980000000002, but got: 29.5683. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 29.5683}}, {"Model Result Index 2": {"sub_error": ["Wrong execution result for \"convert_currency(amount=5000,from_currency='JPY',to_currency='AUD')\". Expected: 1.7740980000000002, but got: 48.2518. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 48.2518}}, {"Model Result Index 3": {"sub_error": ["Wrong execution result for \"convert_currency(amount=100,from_currency='CAD',to_currency='CHF')\". Expected: 1.7740980000000002, but got: 66.378652. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 66.378652}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"question": "I'm planning a multi-country trip and need to budget my expenses in different currencies. I have 5000 JPY that I need to convert to USD, EUR, and AUD to understand how much I can spend in each region. Additionally, I have 100 CAD and I'm curious how much it would be in CHF. Can you calculate these conversions for me?", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["convert_currency(amount=5000, from_currency='JPY', to_currency='USD')", "convert_currency(amount=300, from_currency='JPY', to_currency='EUR')", "convert_currency(amount=2000, from_currency='JPY', to_currency='AUD')", "convert_currency(amount=100, from_currency='CAD', to_currency='CHF')"], "execution_result": [32.0154, 1.7740980000000002, 19.300720000000002, 66.378652]}, "model_result_raw": [{"convert_currency": "{\"amount\": 5000, \"from_currency\": \"JPY\", \"to_currency\": \"USD\"}"}, {"convert_currency": "{\"amount\": 5000, \"from_currency\": \"JPY\", \"to_currency\": \"EUR\"}"}, {"convert_currency": "{\"amount\": 5000, \"from_currency\": \"JPY\", \"to_currency\": \"AUD\"}"}, {"convert_currency": "{\"amount\": 100, \"from_currency\": \"CAD\", \"to_currency\": \"CHF\"}"}], "model_result_decoded": ["convert_currency(amount=5000,from_currency='JPY',to_currency='USD')", "convert_currency(amount=5000,from_currency='JPY',to_currency='EUR')", "convert_currency(amount=5000,from_currency='JPY',to_currency='AUD')", "convert_currency(amount=100,from_currency='CAD',to_currency='CHF')"]}
{"id": 13, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Error in execution: \"estimate_derivative(function='3*x**2 + 2*x - 1',x=4)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 1": {"sub_error": ["Error in execution: \"estimate_derivative(function='5*x**3 - 3*x**2 + 2*x + 1',x=-2)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 2": {"sub_error": ["Error in execution: \"estimate_derivative(function='2*x**4 - 3*x**3 + 2*x**2 - x + 1',x=0)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 3": {"sub_error": ["Error in execution: \"estimate_derivative(function='x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1',x=1)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"question": "I'm working on some calculus problems and could use some help with derivatives. Specifically, I need the derivative estimates for a set of functions at particular points. Could you help me with the following?\n\n1. Find the derivative of f(x) = 3x^2 + 2x - 1 at x = 4.\n2. Calculate the derivative when x is -2, g(x) = 5x^3 - 3x^2 + 2x + 1.\n3. Determine the derivative of h(x) = 2x^4 - 3x^3 + 2x^2 - x + 1 at x = 0.\n4. Get the derivative of i(x) = x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1 at x = 1.\n\nCan you run those calculations for me?", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["estimate_derivative(function='lambda x: 3*x**2 + 2*x - 1', x=4)", "estimate_derivative(function='lambda x: 5*x**3 - 3*x**2 + 2*x + 1', x=-2)", "estimate_derivative(function='lambda x: 2*x**4 - 3*x**3 + 2*x**2 - x + 1', x=0)", "estimate_derivative(function='lambda x: x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1', x=1)"], "execution_result": [26.000037678386434, 74.00004164992424, -1.000000082740371, 3.000000248221113]}, "model_result_raw": [{"estimate_derivative": "{\"function\": \"3*x**2 + 2*x - 1\", \"x\": 4}"}, {"estimate_derivative": "{\"function\": \"5*x**3 - 3*x**2 + 2*x + 1\", \"x\": -2}"}, {"estimate_derivative": "{\"function\": \"2*x**4 - 3*x**3 + 2*x**2 - x + 1\", \"x\": 0}"}, {"estimate_derivative": "{\"function\": \"x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1\", \"x\": 1}"}], "model_result_decoded": ["estimate_derivative(function='3*x**2 + 2*x - 1',x=4)", "estimate_derivative(function='5*x**3 - 3*x**2 + 2*x + 1',x=-2)", "estimate_derivative(function='2*x**4 - 3*x**3 + 2*x**2 - x + 1',x=0)", "estimate_derivative(function='x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1',x=1)"]}
{"id": 14, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Wrong number of functions provided. Expected 3, but got 1."], "error_type": "value_error:exec_result_count", "prompt": {"question": "I came across some slang terms that the younger folks in my office have been using, and I'm feeling a bit out of the loop. Could you help me understand what they mean? I'd like to know the definitions of 'Lit', 'Savage', and 'YOLO' as they're defined on Urban Dictionary. Can you look these up for me, one at a time? Let's start with 'Lit'.", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["find_term_on_urban_dictionary(term='Lit')", "find_term_on_urban_dictionary(term='Savage')", "find_term_on_urban_dictionary(term='YOLO')"], "execution_result": ["Contrary to popular modern belief, Lit is a term used to describe mildly intoxicated. It was often used by blues and [jazz musicians] in the 40s, 50s and 60s to describe the \"[sweet spot]\" in which someone was drunk enough to be relaxed and play better, without being wasted and suffering from motor skill [impairment].", "Adj: [Merciless], [brutally honest]; Usually reffering to somebody who has [no regard] for how another person feels and doesn't hold back.", "An overused acronym for \"[You only live once].\" There is an [exception] for those who believe in [reincarnation] or are cats."]}, "model_result_raw": [{"find_term_on_urban_dictionary": "{\"term\":\"Lit\"}"}], "model_result_decoded": ["find_term_on_urban_dictionary(term='Lit')"]}
{"id": 16, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [2, 3] of model output for index 2 of possible answers.", {"Model Result Index 2": {"sub_error": ["Wrong execution result for \"get_active_covid_case_by_country(country='United States')\". Expected: {'get': 'statistics', 'parameters': {'country': 'United States'}, 'errors': [], 'results': 0, 'response': []}, but got: {'get': 'statistics', 'parameters': {'country': 'United States'}, 'errors': [], 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "United States"}, "errors": [], "results": 0, "response": []}}}, {"Model Result Index 3": {"sub_error": ["Wrong execution result for \"get_active_covid_case_by_country(country='China')\". Expected: {'get': 'statistics', 'parameters': {'country': 'United States'}, 'errors': [], 'results': 0, 'response': []}, but got: 118977. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 118977}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"question": "With the pandemic still lingering, I'm trying to stay updated on the COVID-19 situation around the globe. I'm particularly interested in the current active case numbers for a few countries. Could you provide me with the latest figures for active COVID-19 cases in France? After that, I'd also like to know the current situation in Italy, the United States, and China.", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='France')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='United States')", "get_active_covid_case_by_country(country='China')"], "execution_result": [0, 165544, {"get": "statistics", "parameters": {"country": "United States"}, "errors": [], "results": 0, "response": []}, 118977]}, "model_result_raw": [{"get_active_covid_case_by_country": "{\"country\": \"France\"}"}, {"get_active_covid_case_by_country": "{\"country\": \"Italy\"}"}, {"get_active_covid_case_by_country": "{\"country\": \"United States\"}"}, {"get_active_covid_case_by_country": "{\"country\": \"China\"}"}], "model_result_decoded": ["get_active_covid_case_by_country(country='France')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='United States')", "get_active_covid_case_by_country(country='China')"]}
{"id": 20, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='Brazil')\". Expected: 711380, but got: {'get': 'statistics', 'parameters': {'country': 'Brazil'}, 'errors': [], 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "Brazil"}, "errors": [], "results": 0, "response": []}}}, {"Model Result Index 1": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='India')\". Expected: 711380, but got: 533570. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 533570}}, {"Model Result Index 2": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='Russia')\". Expected: 711380, but got: 402756. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 402756}}, {"Model Result Index 3": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='France')\". Expected: 711380, but got: 167642. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 167642}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"question": "I'm compiling a report on the impact of COVID-19 and need the latest death tolls for a few specific countries. Could you provide me with the total number of deaths in Brazil, India, Russia, and France? Please ensure the data is as recent as possible.", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["get_covid_death_by_country(country='Brazil')", "get_covid_death_by_country(country='India')", "get_covid_death_by_country(country='Russia')", "get_covid_death_by_country(country='France')"], "execution_result": [711380, 533570, 402756, 167642]}, "model_result_raw": [{"get_covid_death_by_country": "{\"country\": \"Brazil\"}"}, {"get_covid_death_by_country": "{\"country\": \"India\"}"}, {"get_covid_death_by_country": "{\"country\": \"Russia\"}"}, {"get_covid_death_by_country": "{\"country\": \"France\"}"}], "model_result_decoded": ["get_covid_death_by_country(country='Brazil')", "get_covid_death_by_country(country='India')", "get_covid_death_by_country(country='Russia')", "get_covid_death_by_country(country='France')"]}
{"id": 26, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Wrong number of functions provided. Expected 4, but got 1."], "error_type": "value_error:exec_result_count", "prompt": {"question": "I'm doing a comparative analysis of different products on Amazon, and customer ratings are a crucial factor in my research. I have a list of products identified by their unique ASIN codes, and I need to get the ratings for each one. Could you start by finding the rating for the product with ASIN 'B08PPDJWC8'? After that, I also need the ratings for ASINs 'B07ZPKBL9V', 'B075H2B962', and 'B08BHXG144'.", "function": {"name": "get_rating_by_amazon_ASIN", "description": "Finds the rating of a product by its Amazon ASIN.", "parameters": {"type": "dict", "properties": {"ASIN": {"type": "string", "description": "The Amazon ASIN of the product."}}, "required": ["ASIN"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_rating_by_amazon_ASIN(ASIN='B08PPDJWC8')", "get_rating_by_amazon_ASIN(ASIN='B07ZPKBL9V')", "get_rating_by_amazon_ASIN(ASIN='B075H2B962')", "get_rating_by_amazon_ASIN(ASIN='B08BHXG144')"], "execution_result": ["4.1", "4.3", "4.5", "4.3"]}, "model_result_raw": [{"get_rating_by_amazon_ASIN": "{\"ASIN\":\"B08PPDJWC8\"}"}], "model_result_decoded": ["get_rating_by_amazon_ASIN(ASIN='B08PPDJWC8')"]}
{"id": 32, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Error in execution: 'mat_mul(matA=[1, 2, 3, 4, 5, 6, 7, 8, 9],matB=[10, 11, 12, 13, 14, 15, 16, 17, 18])'. Error: object of type 'int' has no len()"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 1": {"sub_error": ["Error in execution: 'mat_mul(matA=[19, 20, 21, 22],matB=[23, 24, 25, 26])'. Error: object of type 'int' has no len()"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 2": {"sub_error": ["Error in execution: 'mat_mul(matA=[27, 28, 29, 30, 31, 32, 33, 34],matB=[35, 36, 37, 38, 39, 40, 41, 42])'. Error: object of type 'int' has no len()"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 3": {"sub_error": ["Error in execution: 'mat_mul(matA=[43, 44, 45, 46],matB=[47, 48, 49, 50])'. Error: object of type 'int' has no len()"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"question": "I'm working on a project that involves some heavy matrix calculations, and I need to multiply several pairs of matrices to analyze the data. I've got four different sets of matrices to multiply. \n\nFirst off, I need to multiply these two matrices: \n1. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n  and [[10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\nNext, I have another pair that needs to be multiplied:\n2. [[19, 20], [21, 22]]\n  and [[23, 24], [25, 26]]\n\nThe third set of matrices is:\n3. [[27, 28, 29, 30], [31, 32, 33, 34]]\n and [[35, 36, 37, 38], [39, 40, 41, 42]]\n\nFinally, the last set I need to calculate is:\n4.[[43, 44], [45, 46]]\n  and [[47, 48], [49, 50]]\n\nCould you carry out these matrix multiplications for me?", "function": {"name": "mat_mul", "description": "Multiplies two matrices.", "parameters": {"type": "dict", "properties": {"matA": {"type": "array", "description": "The first matrix.", "items": {"type": "integer"}}, "matB": {"type": "array", "description": "The second matrix.", "items": {"type": "integer"}}}, "required": ["matA", "matB"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["mat_mul(matA=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], matB=[[10, 11, 12], [13, 14, 15], [16, 17, 18]])", "mat_mul(matA=[[19, 20], [21, 22]], matB=[[23, 24], [25, 26]])", "mat_mul(matA=[[27, 28, 29, 30], [31, 32, 33, 34]], matB=[[35, 36, 37, 38], [39, 40, 41, 42]])", "mat_mul(matA=[[43, 44], [45, 46]], matB=[[47, 48], [49, 50]])"], "execution_result": [[[84, 90, 96], [201, 216, 231], [318, 342, 366]], [[937, 976], [1033, 1076]], [[2037, 2092, 2147, 2202], [2333, 2396, 2459, 2522]], [[4177, 4264], [4369, 4460]]]}, "model_result_raw": [{"mat_mul": "{\"matA\": [1, 2, 3, 4, 5, 6, 7, 8, 9], \"matB\": [10, 11, 12, 13, 14, 15, 16, 17, 18]}"}, {"mat_mul": "{\"matA\": [19, 20, 21, 22], \"matB\": [23, 24, 25, 26]}"}, {"mat_mul": "{\"matA\": [27, 28, 29, 30, 31, 32, 33, 34], \"matB\": [35, 36, 37, 38, 39, 40, 41, 42]}"}, {"mat_mul": "{\"matA\": [43, 44, 45, 46], \"matB\": [47, 48, 49, 50]}"}], "model_result_decoded": ["mat_mul(matA=[1, 2, 3, 4, 5, 6, 7, 8, 9],matB=[10, 11, 12, 13, 14, 15, 16, 17, 18])", "mat_mul(matA=[19, 20, 21, 22],matB=[23, 24, 25, 26])", "mat_mul(matA=[27, 28, 29, 30, 31, 32, 33, 34],matB=[35, 36, 37, 38, 39, 40, 41, 42])", "mat_mul(matA=[43, 44, 45, 46],matB=[47, 48, 49, 50])"]}
{"id": 33, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Wrong number of functions provided. Expected 4, but got 2."], "error_type": "value_error:exec_result_count", "prompt": {"question": "Sure, let's start by finding out what 5 factorial is. Once we have that, we'll move on to calculating the factorial for 7. After we've figured those out, we can proceed to determine the factorials for 10 and then 12. Could you please provide me with the factorial results for these four numbers in sequence?", "function": {"name": "math_factorial", "description": "Calculates the factorial of a number.", "parameters": {"type": "dict", "properties": {"n": {"type": "integer", "description": "The number to calculate the factorial of."}}, "required": ["n"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["math_factorial(n=5)", "math_factorial(n=7)", "math_factorial(n=10)", "math_factorial(n=12)"], "execution_result": [120, 5040, 3628800, 479001600]}, "model_result_raw": [{"math_factorial": "{\"n\": 5}"}, {"math_factorial": "{\"n\": 7}"}], "model_result_decoded": ["math_factorial(n=5)", "math_factorial(n=7)"]}
{"id": 47, "model_name": "gpt-4o-2024-05-13-FC", "test_category": "executable_parallel_function", "valid": false, "error": ["Wrong number of functions provided. Expected 4, but got 3."], "error_type": "value_error:exec_result_count", "prompt": {"question": "We're planning a dinner and decided to order a bunch of items. We want 101 dumplings at $0.1 each, 20 rice bowls at $10 each, 50 spring rolls at $0.5 each, and 10 noodle soups at $3 each. I need to know the total cost for our meal. Can you work that out for me?", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string", "description": "the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak']."}}, "quantity": {"type": "array", "items": {"type": "integer", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "float", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["order_food(item=['dumplings'], quantity=[101], price=[0.1])", "order_food(item=['rice bowl'], quantity=[20], price=[10])", "order_food(item=['spring rolls'], quantity=[50], price=[0.5])", "order_food(item=['noodle soup'], quantity=[10], price=[3])"], "execution_result": [10.100000000000001, 200, 25.0, 30]}, "model_result_raw": [{"order_food": "{\"item\": [\"dumplings\"], \"quantity\": [101], \"price\": [0.1]}"}, {"order_food": "{\"item\": [\"rice bowl\"], \"quantity\": [20], \"price\": [10]}"}, {"order_food": "{\"item\": [\"noodles\"], \"quantity\": [10], \"price\": [3]}"}], "model_result_decoded": ["order_food(item=['dumplings'],quantity=[101],price=[0.1])", "order_food(item=['rice bowl'],quantity=[20],price=[10])", "order_food(item=['noodles'],quantity=[10],price=[3])"]}