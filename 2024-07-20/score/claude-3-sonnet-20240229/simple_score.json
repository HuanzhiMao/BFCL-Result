{"accuracy": 0.92, "correct_count": 368, "total_count": 400}
{"id": 6, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'root_type': 'all'. Expected one of ['', 'real']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "function": {"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": "[solve_quadratic(a=3, b=-11, c=-4, root_type='all')]", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4, "root_type": "all"}}], "possible_answer": {"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["", "real"]}}}
{"id": 18, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'formatted': False. Expected one of [True, '']."], "error_type": "value_error:others", "prompt": {"question": "Find the prime factors of 450", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false. Default is true."}}, "required": ["number", "formatted"]}}}, "model_result_raw": "[get_prime_factors(number=450, formatted=False)]", "model_result_decoded": [{"get_prime_factors": {"number": 450, "formatted": false}}], "possible_answer": {"get_prime_factors": {"number": [450], "formatted": [true, ""]}}}
{"id": 20, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Calculate the greatest common divisor of two numbers: 40 and 50", "function": {"name": "math.gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}}, "model_result_raw": "[{'name': 'math.gcd', 'description': 'Compute the greatest common divisor of two numbers', 'parameters': {'num1': 40, 'num2': 50}}]", "possible_answer": {"math.gcd": {"num1": [40], "num2": [50]}}}
{"id": 24, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "What is the prime factorization of the number 60? Return them in the form of dictionary", "function": {"name": "prime_factorize", "description": "Calculate the prime factorization of a given integer.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which to calculate the prime factorization."}, "return_type": {"type": "string", "description": "Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'."}}, "required": ["number"]}}}, "model_result_raw": "[{'prime_factorize': {'number': 60, 'return_type': 'dictionary'}}]", "possible_answer": {"prime_factorize": {"number": [60], "return_type": ["dictionary"]}}}
{"id": 37, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'miles'. Expected one of ['km', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the shortest driving distance between New York City and Washington D.C.", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}}, "model_result_raw": "[get_shortest_driving_distance(origin='New York City', destination='Washington D.C.', unit='miles')]", "model_result_decoded": [{"get_shortest_driving_distance": {"origin": "New York City", "destination": "Washington D.C.", "unit": "miles"}}], "possible_answer": {"get_shortest_driving_distance": {"origin": ["New York City"], "destination": ["Washington D.C."], "unit": ["km", ""]}}}
{"id": 75, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duplication_frequency': 2. Expected one of [1]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.", "function": {"name": "calculate_bacteria_evolution_rate", "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.", "parameters": {"type": "dict", "properties": {"start_population": {"type": "integer", "description": "The starting population of bacteria."}, "duplication_frequency": {"type": "integer", "description": "The frequency of bacteria duplication per hour."}, "duration": {"type": "integer", "description": "Total duration in hours."}, "generation_time": {"type": "integer", "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"}}, "required": ["start_population", "duplication_frequency", "duration"]}}}, "model_result_raw": "[calculate_bacteria_evolution_rate(start_population=5000, duplication_frequency=2, duration=6)]", "model_result_decoded": [{"calculate_bacteria_evolution_rate": {"start_population": 5000, "duplication_frequency": 2, "duration": 6}}], "possible_answer": {"calculate_bacteria_evolution_rate": {"start_population": [5000], "duplication_frequency": [1], "duration": [6], "generation_time": [20, ""]}}}
{"id": 83, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order='ascending')]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 96, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Calculate the area of a triangle with base 5m and height 3m.", "function": {"name": "calc_area_triangle", "description": "Calculate the area of a triangle with the formula area = 0.5 * base * height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The length of the base of the triangle in meters."}, "height": {"type": "integer", "description": "The perpendicular height of the triangle from the base to the opposite vertex in meters."}}, "required": ["base", "height"]}}}, "model_result_raw": "[{'name': 'calc_area_triangle', 'description': 'Calculate the area of a triangle with the formula area = 0.5 * base * height.', 'parameters': {'type': 'dict', 'properties': {'base': {'type': 'integer', 'description': 'The length of the base of the triangle in meters.'}, 'height': {'type': 'integer', 'description': 'The perpendicular height of the triangle from the base to the opposite vertex in meters.'}}, 'required': ['base', 'height']}}]", "possible_answer": {"calc_area_triangle": {"base": [5], "height": [3]}}}
{"id": 102, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "function": {"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}}, "model_result_raw": "[{'calculate_speed': {'distance': 450, 'time': 20, 'to_unit': 'km/h'}}]", "possible_answer": {"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}}
{"id": 104, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "[{'mathematics.calculate_area_under_curve': {'polynomial': [3.0, 2.0, -4.0], 'limits': [-1.0, 2.0]}}]", "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 140, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'yearly_yield': 0.05. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=0.05, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 0.05, "investment_amount": 2000, "years": 3}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [5], "investment_amount": [2000], "years": [3]}}}
{"id": 152, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the highest grossing bank in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country='United States', year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "United States", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'San Diego County'. Expected one of ['San Diego']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "[crime_record.get_record(case_number='CA123456', county='San Diego County', details=True)]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego County", "details": true}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 184, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "[lawsuit_search(entity='Apple', county='Santa Clara')]", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 201, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_efficiency': 25.0. Expected one of ['', 20.0]."], "error_type": "value_error:others", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "[calculate_emissions(distance=12000, fuel_type='gas', fuel_efficiency=25.0)]", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25.0}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 212, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "[send_email(to='john.doe@example.com', subject='Meeting', body='Let's meet at 10 AM tomorrow')]", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 216, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"question": "Give me a brief on movie 'Interstellar'", "function": {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}}, "model_result_raw": "[movie_details.brief(title='Interstellar', extra_info=True)]", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": {"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}}
{"id": 217, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "[sentiment_analysis(text='I love the food here! It's always fresh and delicious.', language='en')]", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 225, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sub_topics': ['behavior', 'group dynamics']. Expected one of [['behaviour', 'group dynamics']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "function": {"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}}, "model_result_raw": "[social_media_analytics.most_followed(topic='psychology', sub_topics=['behavior', 'group dynamics'], region='all')]", "model_result_decoded": [{"social_media_analytics.most_followed": {"topic": "psychology", "sub_topics": ["behavior", "group dynamics"], "region": "all"}}], "possible_answer": {"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}}
{"id": 235, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}}, "model_result_raw": "[history_eu.fetch_events(century=19, region='Western', category='Wars'), history_eu.fetch_events(century=19, region='Eastern', category='Wars'), history_eu.fetch_events(century=19, region='Southern', category='Wars'), history_eu.fetch_events(century=19, region='Northern', category='Wars')]", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Western", "category": "Wars"}}, {"history_eu.fetch_events": {"century": 19, "region": "Eastern", "category": "Wars"}}, {"history_eu.fetch_events": {"century": 19, "region": "Southern", "category": "Wars"}}, {"history_eu.fetch_events": {"century": 19, "region": "Northern", "category": "Wars"}}], "possible_answer": {"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}}
{"id": 248, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'category': 'Physics'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}}, "model_result_raw": "[historical_contrib.get_contrib(scientist='Albert Einstein', date='1915-03-17', category='Physics')]", "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "Albert Einstein", "date": "1915-03-17", "category": "Physics"}}], "possible_answer": {"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}}
{"id": 250, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": "[religion.history_info(religion='Christianity', till_century=14, include_people=True)]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}}
{"id": 317, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'female'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the current world rank of a Tennis player, Serena Williams.", "function": {"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}}, "model_result_raw": "[get_sport_ranking(sport='tennis', player_name='Serena Williams', gender='female')]", "model_result_decoded": [{"get_sport_ranking": {"sport": "tennis", "player_name": "Serena Williams", "gender": "female"}}], "possible_answer": {"get_sport_ranking": {"sport": ["Tennis"], "player_name": ["Serena Williams"], "gender": ["", "all"]}}}
{"id": 356, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': 'Beef Lasagna Recipe'. Expected one of ['Beef Lasagna']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}}, "model_result_raw": "[recipe_info.get_calories(website='Foodnetwork.com', recipe='Beef Lasagna Recipe')]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "Beef Lasagna Recipe"}}], "possible_answer": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}}
{"id": 371, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['olive oil', 'olive oil', 'olive oil', 'rice']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location='Palo Alto, CA', items=['olive oil', 'olive oil', 'olive oil', 'rice'], quantity=[1, 1, 1, 5])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "olive oil", "olive oil", "rice"], "quantity": [1, 1, 1, 5]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'pack_size': [12]. Expected one of [[1, 1, 12]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "[walmart.purchase(loc='San Jose', product_list=['apples', 'rice', 'bottled water'], pack_size=[12])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'egg']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkin', 'eggs'], quantities=[3, 24], store_location='all')]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", "eggs"], "quantities": [3, 24], "store_location": "all"}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 379, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Convert time 3pm from New York time zone to London time zone.", "function": {"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "dict", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}}, "model_result_raw": "[{'timezone.convert': {'time': '3pm', 'from_timezone': 'America/New_York', 'to_timezone': 'Europe/London'}}]", "possible_answer": {"timezone.convert": {"time": ["3pm"], "from_timezone": ["America/New_York", "New York", "NYC", "New York City"], "to_timezone": ["Europe/London", "London"]}}}
{"id": 383, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'single room'. Expected one of ['single']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hilton Hotel', location='Chicago', room_type='single room', start_date='2022-12-10', nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single room", "start_date": "2022-12-10", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 387, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'luxury room'. Expected one of ['luxury', 'Luxury']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hotel Paradise', location='Las Vegas', room_type='luxury room', start_date='05-12-2022', stay_duration=3, view='city view')]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hotel Paradise", "location": "Las Vegas", "room_type": "luxury room", "start_date": "05-12-2022", "stay_duration": 3, "view": "city view"}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}}
{"id": 395, "model_name": "claude-3-sonnet-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': 'Eiffel Tower, Paris, France'. Expected one of ['Eiffel Tower']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "[maps.get_distance_duration(start_location='Eiffel Tower, Paris, France', end_location='Louvre Museum, Paris, France', traffic=False)]", "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "Eiffel Tower, Paris, France", "end_location": "Louvre Museum, Paris, France", "traffic": false}}], "possible_answer": {"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}}