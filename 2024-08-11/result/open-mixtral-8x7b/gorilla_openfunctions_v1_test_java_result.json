{"id": "java_0", "result": "[GeometryPresentation.createPresentation(controller=mapController, parent=mapArea)]", "input_token_count": 388, "output_token_count": 19, "latency": 0.522183895111084}
{"id": "java_1", "result": "[SQLCompletionAnalyzer.makeProposalsFromObject(object='Customers', useShortName='true', params='{\"schemaFilter\": \"public\", \"limit\": \"50\"}')]", "input_token_count": 430, "output_token_count": 42, "latency": 5.089768886566162}
{"id": "java_2", "result": "In this case, the provided function `FireBirdUtils.getViewSourceWithHeader` can be used to generate the full SQL creation script with a header for the Firebird database view. The function requires the following parameters:", "input_token_count": 441, "output_token_count": 46, "latency": 5.0171239376068115}
{"id": "java_3", "result": "[DB2Tablespace.resolveTablespaceReference(monitor=dbMonitor, dataSource=db2DataSource, reference='USERSPACE1')]", "input_token_count": 446, "output_token_count": 30, "latency": 4.906998634338379}
{"id": "java_4", "result": "[DB2ViewBaseDepCache.prepareObjectsStatement(session=jdbcSession, db2ViewBase='HR.EmployeeView')]", "input_token_count": 404, "output_token_count": 30, "latency": 0.6526141166687012}
{"id": "java_5", "result": "[PlainTextPresentation.createPresentation(controller='dataController', parent='compositeParent', readOnly=True, multiLine=True, scrollable=True)]", "input_token_count": 411, "output_token_count": 37, "latency": 0.6550438404083252}
{"id": "java_6", "result": "[SpreadsheetPresentation.refreshData(refreshMetadata=\"true\", append=\"true\", keepState=\"true\")]", "input_token_count": 420, "output_token_count": 24, "latency": 0.7097218036651611}
{"id": "java_7", "result": "[EFSNIOResource.copy(destination='/backup/data.txt', force='true', monitor=progressTracker)]", "input_token_count": 461, "output_token_count": 28, "latency": 0.6175601482391357}
{"id": "java_8", "result": "[EFSNIOFile.setContents(source=fileStream, force=\"true\", keepHistory=\"false\", monitor=progressMonitor)]", "input_token_count": 487, "output_token_count": 29, "latency": 0.5572819709777832}
{"id": "java_9", "result": "[writeMultiPoint(multiPoint='[[1,2], [3,4], [5,6], [7,8], [9,10]]', xyzmMode='XYZ', buffer=str(ByteBuffer.allocate(1024)))]", "input_token_count": 518, "output_token_count": 59, "latency": 0.8210551738739014}
{"id": "java_10", "result": "[JNIBridge.setLauncherInfo(launcher='/usr/local/bin/dbeaver', name='DBeaverLauncher')]", "input_token_count": 378, "output_token_count": 35, "latency": 0.721851110458374}
{"id": "java_11", "result": "[BasePolicyDataProvider.getRegistryPolicyValue(root='HKEY\\_LOCAL\\_MACHINE', property='EnableExtensions')]", "input_token_count": 403, "output_token_count": 28, "latency": 0.5371582508087158}
{"id": "java_12", "result": "[ExasolExecutionContext.setCurrentSchema(schemaName='AnalyticsDB', monitor='progressMonitor')]", "input_token_count": 385, "output_token_count": 23, "latency": 0.5438380241394043}
{"id": "java_13", "result": "[AltibaseGrantee.prepareObjectsStatement(session='JDBC\\_session', owner='JohnDoe')]", "input_token_count": 411, "output_token_count": 27, "latency": 0.6415162086486816}
{"id": "java_14", "result": "[FunGameBase.onFinish(layout=gameLayout.toString(), success=\"true\")]", "input_token_count": 379, "output_token_count": 20, "latency": 0.45729613304138184}
{"id": "java_15", "result": "[Res9patchStreamDecoder.decode(input='imageInputStream', out='imageOutputStream')]", "input_token_count": 400, "output_token_count": 20, "latency": 0.5010538101196289}
{"id": "java_16", "result": "[InsnDecoder.invokePolymorphic(insn=instructionData, isRange='true')]", "input_token_count": 391, "output_token_count": 23, "latency": 0.7090051174163818}
{"id": "java_17", "result": "[GenericTypesVisitor.attachGenericTypesInfo(mth=initMethod, insn=newConstructorInsn)]", "input_token_count": 402, "output_token_count": 24, "latency": 0.5665900707244873}
{"id": "java_18", "result": "In order to obtain the third page of role counts with a page size of 20, you can call the `SysRoleController.queryPageRoleCount` function with the appropriate parameters. The `pageNo` parameter should be set to \"3\" to indicate that you want to retrieve the third page, and the `pageSize` parameter should be set to \"20\" to specify the number of records per page. Here is the function call:\n\n```\n[SysRoleController.queryPageRoleCount(pageNo=\"3\", pageSize=\"20\")]\n```", "input_token_count": 395, "output_token_count": 122, "latency": 5.6348137855529785}
{"id": "java_19", "result": "[PersonController.personal(model='webModel', request='userRequest')]", "input_token_count": 398, "output_token_count": 17, "latency": 4.626352071762085}
{"id": "java_20", "result": "[HbaseAdapter.updateConfig(fileName='user-mapping.yml', config=newMappingConfig)]", "input_token_count": 391, "output_token_count": 23, "latency": 4.669424057006836}
{"id": "java_21", "result": "[SessionHandler.exceptionCaught(ctx='nettyChannelContext', e='ioExceptionEvent')]", "input_token_count": 394, "output_token_count": 22, "latency": 0.6187300682067871}
{"id": "java_22", "result": "[PmsProductServiceImpl.updateNewStatus(ids=[101, 202, 303], newStatus=\"2\")]", "input_token_count": 399, "output_token_count": 32, "latency": 0.6093218326568604}
{"id": "java_23", "result": "[SmsHomeNewProductServiceImpl.list(productName='%LED TV%', recommendStatus='1', pageSize='20', pageNum='3')]", "input_token_count": 473, "output_token_count": 36, "latency": 0.8131279945373535}
{"id": "java_24", "result": "[PmsProductCategoryController.updateShowStatus(ids=[101, 102, 103], showStatus=\"0\")]", "input_token_count": 408, "output_token_count": 32, "latency": 0.5980021953582764}
{"id": "java_25", "result": "Based on the question, the function call required is:\nSmsHomeRecommendSubjectController.updateSort(id=\"42\", sort=\"5\")", "input_token_count": 372, "output_token_count": 33, "latency": 0.8224194049835205}
{"id": "java_26", "result": "[ProxyConnection.prepareCall(sql='CALL totalSales(?)', resultSetType='ResultSet.TYPE\\_SCROLL\\_INSENSITIVE', concurrency='ResultSet.CONCUR\\_READ\\_ONLY', holdability='ResultSet.CLOSE\\_CURSORS\\_AT\\_COMMIT')]", "input_token_count": 556, "output_token_count": 66, "latency": 1.0246400833129883}
{"id": "java_27", "result": "[TwoSum.twoSum(nums=\"[2, 7, 11, 15]\", target=\"9\")]", "input_token_count": 385, "output_token_count": 28, "latency": 0.70058274269104}
{"id": "java_28", "result": "[configStorage.dynamicCredentialsScheduledExecutorService(credentialsFile='es\\_credentials.properties', credentialsRefreshInterval='30', basicCredentials=basicAuthCredentials)]", "input_token_count": 444, "output_token_count": 36, "latency": 0.631784200668335}
{"id": "java_29", "result": "[propertyTransferredToCollectorBuilder(property='zipkin.collector.activemq.concurrency', value='10', builderExtractor='ActiveMQCollector.Builder::getConcurrency')]", "input_token_count": 442, "output_token_count": 45, "latency": 0.7644250392913818}
{"id": "java_30", "result": "[RedissonAsyncCache.putIfAbsent(key='answer', value='42')]", "input_token_count": 417, "output_token_count": 21, "latency": 0.5594820976257324}
{"id": "java_31", "result": "[RedissonRx.getQueue(name='taskQueue', codec=jsonCodec)]", "input_token_count": 371, "output_token_count": 19, "latency": 0.5526669025421143}
{"id": "java_32", "result": "[RedissonPermitExpirableSemaphore.tryAcquireAsync(waitTime=\"5\", leaseTime=\"120\", unit=\"SECONDS\")]", "input_token_count": 456, "output_token_count": 34, "latency": 0.6223161220550537}
{"id": "java_33", "result": "[RedissonMapCache.putOperationAsync(key='employee:1234', value='John Doe')]", "input_token_count": 387, "output_token_count": 27, "latency": 0.574530839920044}
{"id": "java_34", "result": "[ServiceManager.newTimeout(task='cleanupTask', delay='300', unit='TimeUnit.SECONDS')]", "input_token_count": 429, "output_token_count": 28, "latency": 0.6211681365966797}
{"id": "java_35", "result": "[RedissonConnection.bitOp(op=\"AND\", destination=\"user:online:both\", keys=[\"user:online:today\", \"user:online:yesterday\"])]", "input_token_count": 483, "output_token_count": 40, "latency": 0.7995100021362305}
{"id": "java_36", "result": "[ObjectMapEntryReplayDecoder.decode(parts=['userID', 42, 'username', 'johndoe', 'isActive', true], state=processingState)]", "input_token_count": 413, "output_token_count": 40, "latency": 0.6593048572540283}
{"id": "java_37", "result": "[ConsoleAnnotator.annotate(context=jenkinsBuild, text=buildOutput)]", "input_token_count": 387, "output_token_count": 20, "latency": 0.5222830772399902}
{"id": "java_38", "result": "[NestedValueFetcher.createSourceMapStub(filteredSource=docFields)]", "input_token_count": 359, "output_token_count": 19, "latency": 0.5725009441375732}
{"id": "java_39", "result": "[NodeIdConverter.format(event=logEvent, toAppendTo=logBuilder)]", "input_token_count": 381, "output_token_count": 19, "latency": 0.49857378005981445}
{"id": "java_40", "result": "[RoutingNodesChangedObserver.shardInitialized(unassignedShard='shardA', initializedShard='shardB')]", "input_token_count": 395, "output_token_count": 29, "latency": 0.574455976486206}
{"id": "java_41", "result": "[SearchHit.declareInnerHitsParseFields(parser=\"searchHitParser\")]", "input_token_count": 328, "output_token_count": 18, "latency": 0.4571800231933594}
{"id": "java_42", "result": "[TermQueryBuilderTests.termQuery(mapper='usernameField', value='JohnDoe', caseInsensitive='true')]", "input_token_count": 424, "output_token_count": 28, "latency": 4.750965118408203}
{"id": "java_43", "result": "[SecureMockMaker.createSpy(settings=mockSettings, handler=mockHandler, object=testObject)]", "input_token_count": 430, "output_token_count": 26, "latency": 0.6056740283966064}
{"id": "java_44", "result": "Based on the question and the provided functions, I would recommend calling the function 'DesAPITest.init' with the following parameters:\n\n['DesAPITest.init(crypt=\"DESede\", mode=\"CBC\", padding=\"PKCS5Padding\")']", "input_token_count": 429, "output_token_count": 58, "latency": 0.8271489143371582}
{"id": "java_45", "result": "Based on the question, the appropriate function to use is \"Basic.checkSizes\" and the expected size of the environment variable map is 5. The function call should be:\n\n[Basic.checkSizes(environ=envVariables, size=\"5\")]", "input_token_count": 360, "output_token_count": 53, "latency": 5.6079490184783936}
{"id": "java_46", "result": "[MethodInvokeTest.checkInjectedInvoker(csm=csmInstance, expected=MyExpectedClass.class)]", "input_token_count": 416, "output_token_count": 26, "latency": 4.963860988616943}
{"id": "java_47", "result": "[LargeHandshakeTest.format(name='CERTIFICATE', value='MIIFdTCCBF2gAwIBAgISESG' + // the Base64 string should be continued here\n\"............................\")]", "input_token_count": 422, "output_token_count": 54, "latency": 0.7663891315460205}
{"id": "java_48", "result": "[CookieHeaderTest.create(sa='192.168.1.10:8080', sslContext='testSSLContext')]", "input_token_count": 450, "output_token_count": 36, "latency": 0.7273831367492676}
{"id": "java_49", "result": "[Http2TestExchangeImpl.sendResponseHeaders(rCode=\"404\", responseLength=\"1500\")]", "input_token_count": 404, "output_token_count": 27, "latency": 0.5865468978881836}
{"id": "java_50", "result": "[doDeleteByQuery(deleteByQueryRequest=deleteQueryRequest, responseListener=testListener)]", "input_token_count": 425, "output_token_count": 21, "latency": 0.5360751152038574}
{"id": "java_51", "result": "[CCRUsageTransportAction.masterOperation(task=\"master\", request=usageRequest, state=clusterState, listener=actionListener)]", "input_token_count": 489, "output_token_count": 29, "latency": 0.5536060333251953}
{"id": "java_52", "result": "[SamlObjectSignerTests.getChildren(node=SAMLAssertionNode, node_type='class' + ' ' + 'Element'.class.getName())]", "input_token_count": 394, "output_token_count": 38, "latency": 0.5940537452697754}
{"id": "java_53", "result": "[VotingOnlyNodePlugin.fullMasterWithOlderState(localAcceptedTerm='42', localAcceptedVersion='7')]", "input_token_count": 400, "output_token_count": 30, "latency": 0.5507199764251709}
{"id": "java_54", "result": "[AbstractTransportSearchableSnapshotsAction.shardOperation(request=snapshotRequest, shardRouting=shardRouteInfo, task=snapshotTask, listener=operationListener)]", "input_token_count": 506, "output_token_count": 38, "latency": 0.7696459293365479}
{"id": "java_55", "result": "[SearchableSnapshotDirectory.create(repositories=repositoriesService, cache=cacheService, indexSettings=indexSettingsForLogs, shardPath='/data/nodes/0/indices/logs/5', currentTimeNanosSupplier=currentTimeNanos, threadPool=threadPool, blobStoreCacheService=blobStoreCacheService, sharedBlobCacheService=sharedBlobCacheService)]", "input_token_count": 741, "output_token_count": 86, "latency": 1.1185259819030762}
{"id": "java_56", "result": "[CCSDuelIT.parseEntity(entity=httpResponseEntity.getBody(), entityParser=responseParser, parserConfig=defaultParserConfig)]", "input_token_count": 439, "output_token_count": 31, "latency": 0.8055729866027832}
{"id": "java_57", "result": "[Booleans.parseBooleanLenient(value='yes', defaultValue='false')]", "input_token_count": 396, "output_token_count": 20, "latency": 0.5723168849945068}
{"id": "java_58", "result": "[XContentBuilder.map(values={\"userProfile\": {'name': 'name', 'age': 'age', 'email': 'email'}}, ensureNoSelfReferences=true, writeStartAndEndHeaders=true)]", "input_token_count": 469, "output_token_count": 48, "latency": 0.881676197052002}
{"id": "java_59", "result": "[TruncateTranslogAction.execute(terminal=<terminal object in string representation>, shardPath=Paths.get('/var/data/elasticsearch/nodes/0/indices/1shard'), indexDirectory=FSDirectory.open('/var/data/elasticsearch/nodes/0/indices/1shard/index'))]", "input_token_count": 533, "output_token_count": 74, "latency": 1.1541237831115723}
{"id": "java_60", "result": "[NestedQueryBuilder.doBuild(parentSearchContext='mainSearchContext', innerHitsContext='hitsContext'), ]", "input_token_count": 421, "output_token_count": 27, "latency": 0.511472225189209}
{"id": "java_61", "result": "[ScoreFunctionBuilders.exponentialDecayFunction(fieldName='timestamp', origin='now', scale='10d', offset='2d', decay=0.5)]", "input_token_count": 529, "output_token_count": 38, "latency": 0.677001953125}
{"id": "java_62", "result": "[dvRangeQuery(field='temperature', queryType='FLOAT', from='20.5', to='30.0', includeFrom='true', includeTo='false')]", "input_token_count": 555, "output_token_count": 40, "latency": 0.8257029056549072}
{"id": "java_63", "result": "[withinQuery(field='age', from='30', to='40', includeFrom='true', includeTo='false')]", "input_token_count": 499, "output_token_count": 30, "latency": 0.5422632694244385}
{"id": "java_64", "result": "[DateScriptFieldType.createFieldType(name='timestamp', factory='dateFactory', script='dateScript', meta='{\"format\": \"epoch_millis\"}', onScriptError='FAIL')]", "input_token_count": 512, "output_token_count": 43, "latency": 0.7773129940032959}
{"id": "java_65", "result": "[RootObjectMapper.doXContent(builder=xContentBuilderInstance, params={\"includeDefaults\": true, \"skipRuntimeFields\": true, \"dynamicDateFormats\": true, \"dynamicTemplates\": true, \"dateDetection\": true, \"numericDetection\": true})]", "input_token_count": 408, "output_token_count": 62, "latency": 0.957313060760498}
{"id": "java_66", "result": "[CompositeRuntimeField.createChildRuntimeField(parserContext='mappingParserContext', parent='compositeField1', parentScriptFactory='compositeScriptFactory', onScriptError='onScriptError.IGNORE')]", "input_token_count": 493, "output_token_count": 47, "latency": 0.836392879486084}
{"id": "java_67", "result": "[MacDmgBundler.prepareDMGSetupScript(appLocation='/Applications/PhotoEditor.app', params={'appName': 'PhotoEditor', 'imagesRoot': '<background_image_folder>', 'backgroundImage': '<background_image_file>', 'installationDirectory': '/Applications'})]\n\nNote: Replace `<background_image_folder>` and `<background_image_file>` with the actual folder and file path of your custom background image.", "input_token_count": 416, "output_token_count": 106, "latency": 1.2914133071899414}
{"id": "java_68", "result": "[MacBaseInstallerBundler.validateAppImageAndBundler(params={'appImagePath': '/Applications/MyApp.app', 'applicationName': 'MyApp'})]", "input_token_count": 374, "output_token_count": 42, "latency": 0.6683549880981445}
{"id": "java_69", "result": "[DurationImpl.alignSigns(buf=\"durations\", start=\"2\", end=\"5\")]", "input_token_count": 452, "output_token_count": 21, "latency": 0.43799877166748047}
{"id": "java_70", "result": "[XMLNamespaceBinder.endElement(element='QName(\"http://www.example.com\",\"item\",\"ex\")', augs=augmentations)]", "input_token_count": 428, "output_token_count": 34, "latency": 0.6066222190856934}
{"id": "java_71", "result": "[CoroutineManager.co\\_exit\\_to(arg\\_object='resultData', thisCoroutine='5', toCoroutine='10')]", "input_token_count": 465, "output_token_count": 32, "latency": 0.956387996673584}
{"id": "java_72", "result": "[ToTextStream.characters(ch=textBuffer, start='5', length='10')]", "input_token_count": 452, "output_token_count": 23, "latency": 0.4731600284576416}
{"id": "java_73", "result": "[Encodings.getEncodingInfo(encoding=\"UTF-8\", allowJavaNames=\"true\")]", "input_token_count": 370, "output_token_count": 21, "latency": 0.5163629055023193}
{"id": "java_74", "result": "[BaseMarkupSerializer.surrogates(high='55357', low='56832', inContent='false')]", "input_token_count": 451, "output_token_count": 32, "latency": 4.767595052719116}
{"id": "java_75", "result": "[JdkXmlFeatures.getSystemProperty(feature='XML_SECURITY', sysPropertyName='enableXmlSecurityFeature')]", "input_token_count": 389, "output_token_count": 28, "latency": 0.9301810264587402}
{"id": "java_76", "result": "[Intro.step(w='800', h='600')]", "input_token_count": 356, "output_token_count": 19, "latency": 0.5238950252532959}
{"id": "java_77", "result": "[JndiLoginModule.verifyPassword(encryptedPassword='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', password='P@ssw0rd!')]", "input_token_count": 427, "output_token_count": 84, "latency": 5.255023241043091}
{"id": "java_78", "result": "[OptionSpecBuilder.requiredUnless(dependent='output-format', otherDependents=['quiet', 'verbose'])]", "input_token_count": 387, "output_token_count": 27, "latency": 4.7748353481292725}
{"id": "java_79", "result": "[SAXFilterFactoryImpl.resolveEntity(publicid='1234', sysId='http://astro.com/stylesheets/toptemplate')]", "input_token_count": 416, "output_token_count": 36, "latency": 0.5914487838745117}
{"id": "java_80", "result": "Based on the question, it seems like we need to compile a regex pattern based on the category 'failOn' and rule number 42. This can be achieved using the `RegexConstraint.initIRPattern` function. Here is the function call in the required format:\n\n`[RegexConstraint.initIRPattern(category='failOn', ruleIdx='42')]`\n\nNote that the `category` and `ruleIdx` parameters are passed as strings, as required by the function signature.", "input_token_count": 377, "output_token_count": 106, "latency": 1.3287439346313477}
{"id": "java_81", "result": "[TestObjectGraphAfterGC.doTesting(testcaseData='humongous-test-case.json', doGC=<custom garbage collector code in string representation>, checker='referenceChecker', gcLogName='gc-analysis.log', shouldContain=['GC pause'], shouldNotContain=['OutOfMemoryError'])]", "input_token_count": 654, "output_token_count": 74, "latency": 0.9763219356536865}
{"id": "java_82", "result": "[clear001a.runIt(args=testArgs, out=\"System.out\")]", "input_token_count": 425, "output_token_count": 21, "latency": 0.5359277725219727}
{"id": "java_83", "result": "Based on the question and the provided function, you can achieve the performance test with the following function call:\n\n```python\n[thrcputime002.runIt(argv=[\"-waitTime\", \"120000\", \"-iterations\", \"500\"], out=\"System.out\")]\n```\n\nThis function call will execute a performance test with 500 iterations, a wait time of 120000 milliseconds (2 minutes), and output the results to the `System.out` stream. The `argv` parameter is a list of command-line arguments, where each argument is a string. In this case, the arguments are the wait time (-waitTime) and the number of iterations (-iterations). The `out` parameter is set to \"System.out\", which specifies the PrintStream to which the test output will be written.", "input_token_count": 459, "output_token_count": 193, "latency": 2.2029988765716553}
{"id": "java_84", "result": "[checkInnerFields(redefCls='myRedefClass', expValue='100')]", "input_token_count": 400, "output_token_count": 23, "latency": 0.5728211402893066}
{"id": "java_85", "result": "[classfloadhk005.runIt(argv=['/path/to/classes', '60'], out=logStream)]", "input_token_count": 454, "output_token_count": 32, "latency": 1.0486011505126953}
{"id": "java_86", "result": "[argumenttypes001.runThis(argv=['-v', '--no-strict'], out=\"debugOutput\")]", "input_token_count": 421, "output_token_count": 27, "latency": 0.5779058933258057}
{"id": "java_87", "result": "[suspendpolicy017.settingVMDeathRequest(suspendPolicy='EVENT_THREAD', property='testProperty=deathEvent001')]", "input_token_count": 396, "output_token_count": 33, "latency": 0.8181931972503662}
{"id": "java_88", "result": "In order to create a MethodEntryRequest for the specified thread, class, with the desired suspend policy and custom property in a JDI test environment, you can use the provided function 'filter\\_s002.setting22MethodEntryRequest'. Here is the function call with the required parameters:\n\n```python\n[filter_s002.setting22MethodEntryRequest(thread='mainThread', testedClass='com.example.MainClass', suspendPolicy='4', property='testProperty')]\n```\n\nThe parameter 'suspendPolicy' is an integer type parameter and the corresponding string representation for the suspend policy 'EventRequest.SUSPEND\\_ALL' is '4'.", "input_token_count": 491, "output_token_count": 147, "latency": 1.8680062294006348}
{"id": "java_89", "result": "[runThis(argv=['-waitTime', '2', '-debuggeeName', 'TestDebuggee'], out='testLogStream')]", "input_token_count": 440, "output_token_count": 33, "latency": 0.6845858097076416}
{"id": "java_90", "result": "[sourcepaths002.runIt(args=['-v', '-p'], out='System.out')]", "input_token_count": 412, "output_token_count": 26, "latency": 0.6316659450531006}
{"id": "java_91", "result": "[invokemethod007.runIt(args=['suspend', 'log'], out='debugLog')]", "input_token_count": 408, "output_token_count": 26, "latency": 0.679229736328125}
{"id": "java_92", "result": "[ClassFileFinder.findClassFile(name='com.example.MyClass', classPath='/usr/local/classes:/home/user/java/libs')]", "input_token_count": 397, "output_token_count": 39, "latency": 0.8463869094848633}
{"id": "java_93", "result": "[AbstractJarAgent.runJarAgent(options='trace log', inst=appInstrumentation)]", "input_token_count": 407, "output_token_count": 23, "latency": 0.5102250576019287}
{"id": "java_94", "result": "[NFILibrary.isMemberReadable(symbol='getVersion', recursive=null)]", "input_token_count": 371, "output_token_count": 20, "latency": 0.5063819885253906}
{"id": "java_95", "result": "[ExportNodeTest.doGeneric(receiver='ExportInlinedObject1Instance', argument='HelloWorld', node='InlinableNodeInstance', library='NodeLibraryInstance')]", "input_token_count": 488, "output_token_count": 38, "latency": 0.6416709423065186}
{"id": "java_96", "result": "[InstrumentableProcessor.createCallConverter(converterMethod='convertValue', frameParameterName='frameVar', returnName='returnValueCode')]", "input_token_count": 457, "output_token_count": 32, "latency": 0.8726100921630859}
{"id": "java_97", "result": "[FlatNodeGenFactory.generateIntrospectionInfo(clazz=\"NodeClass\", inlined=\"false\")]", "input_token_count": 394, "output_token_count": 24, "latency": 0.5055439472198486}
{"id": "java_98", "result": "[LoopConditionProfile.calculateProbability(trueCountLocal=\"150\", falseCountLocal=\"50\")]", "input_token_count": 380, "output_token_count": 26, "latency": 0.5053417682647705}
{"id": "java_99", "result": "[LibraryExport.createDelegate(factory='myFactory', delegate='existingDelegate')]", "input_token_count": 392, "output_token_count": 18, "latency": 0.6248488426208496}