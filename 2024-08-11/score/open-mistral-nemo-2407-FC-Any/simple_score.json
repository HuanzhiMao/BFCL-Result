{"accuracy": 0.93, "correct_count": 372, "total_count": 400}
{"id": 14, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': 'y=x^2'. Expected one of ['x**2', 'lambda x: x**2']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_13", "question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": [{"calculate_area_under_curve": "{\"function\": \"y=x^2\", \"interval\": [1, 3]}"}], "model_result_decoded": [{"calculate_area_under_curve": {"function": "y=x^2", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 59, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'specific_function': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"id": "simple_58", "question": "What is the function of ATP synthase in mitochondria?", "function": {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}}, "model_result_raw": [{"cell_biology_function_lookup": "{\"molecule\": \"ATP synthase\", \"organelle\": \"mitochondria\", \"specific_function\": false}"}], "model_result_decoded": [{"cell_biology_function_lookup": {"molecule": "ATP synthase", "organelle": "mitochondria", "specific_function": false}}], "possible_answer": {"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}}
{"id": 70, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Optional parameter 'species' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_69", "question": "Find out the population and species of turtles in Mississippi river in 2020.", "function": {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}}, "model_result_raw": [{"ecology_get_turtle_population": "{\"location\": \"Mississippi river\", \"year\": 2020}"}], "model_result_decoded": [{"ecology_get_turtle_population": {"location": "Mississippi river", "year": 2020}}], "possible_answer": {"ecology.get_turtle_population": {"location": ["Mississippi river"], "year": [2020], "species": [true]}}}
{"id": 83, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": [{"calculate_average": "{\"numbers\": [12, 15, 18, 20, 21, 26, 30]}"}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": [{"array_sort": "{\"list\": [5, 3, 4, 1, 2], \"order\": \"ascending\"}"}], "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 100, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 2.0021. Expected one of [6.2832]."], "error_type": "value_error:others", "prompt": {"id": "simple_99", "question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": [{"plot_sine_wave": "{\"start_range\": 0, \"end_range\": 2.0021, \"frequency\": 5}"}], "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 2.0021, "frequency": 5}}], "possible_answer": {"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 104, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": [{"mathematics_calculate_area_under_curve": "{\"polynomial\": [3, 2, -4], \"limits\": [-1, 2]}"}], "model_result_decoded": [{"mathematics_calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 123, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_122", "question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": [{"chi_squared_test": "{\"table\": [10, 20, 30, 40]}"}], "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40]}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 146, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'interest_rate': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "simple_145", "question": "Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.", "function": {"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given principal, interest rate, and period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial principal."}, "interest_rate": {"type": "float", "description": "The annual interest rate."}, "period": {"type": "integer", "description": "The period in years."}, "compounding_frequency": {"type": "string", "description": "The frequency of compounding per year. Defaults to 'Annually'.", "enum": ["Annually", "Semiannually", "Quarterly", "Monthly", "Daily"]}}, "required": ["principal", "interest_rate", "period"]}}}, "model_result_raw": [{"calculate_compounded_interest": "{\"principal\": 5000, \"interest_rate\": 5, \"period\": 10}"}], "model_result_decoded": [{"calculate_compounded_interest": {"principal": 5000, "interest_rate": 5, "period": 10}}], "possible_answer": {"calculate_compounded_interest": {"principal": [5000], "interest_rate": [0.05], "period": [10], "compounding_frequency": ["Annually", ""]}}}
{"id": 151, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 3.0. Expected one of [0.03]."], "error_type": "value_error:others", "prompt": {"id": "simple_150", "question": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "function": {"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}}, "model_result_raw": [{"calculate_roi": "{\"deposit\": 1000, \"annual_interest_rate\": 3, \"years\": 1}"}], "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3, "years": 1}}], "possible_answer": {"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}}
{"id": 152, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": "Find the highest grossing bank in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": [{"highest_grossing_banks": "{\"country\": \"USA\", \"year\": 2020}"}], "model_result_decoded": [{"highest_grossing_banks": {"country": "USA", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"id": "simple_156", "question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": [{"crime_record_get_record": "{\"case_number\": \"CA123456\", \"county\": \"San Diego\", \"details\": false}"}], "model_result_decoded": [{"crime_record_get_record": {"case_number": "CA123456", "county": "San Diego", "details": false}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 169, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '2021-01-01'. Expected one of ['01-01-2021', 'January 1, 2021']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_168", "question": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "function": {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}}, "model_result_raw": [{"lawsuit_search": "{\"company\": \"Google\", \"start_date\": \"2021-01-01\", \"location\": \"California\", \"status\": \"ongoing\"}"}], "model_result_decoded": [{"lawsuit_search": {"company": "Google", "start_date": "2021-01-01", "location": "California", "status": "ongoing"}}], "possible_answer": {"lawsuit_search": {"company": ["Google", "GOOG"], "start_date": ["01-01-2021", "January 1, 2021"], "location": ["California"], "status": ["ongoing", ""]}}}
{"id": 183, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2000. Expected one of ['']."], "error_type": "value_error:others", "prompt": {"id": "simple_182", "question": "Retrieve all the lawsuit details for case number XYZ123", "function": {"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "integer", "description": "The year in which the lawsuit case was initiated. Default is latest year if not specified.", "optional": true}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed. Default is 'all'.", "optional": true}}, "required": ["case_number"]}}}, "model_result_raw": [{"lawsuit_info": "{\"case_number\": \"XYZ123\", \"year\": 2000, \"location\": \"New York\"}"}], "model_result_decoded": [{"lawsuit_info": {"case_number": "XYZ123", "year": 2000, "location": "New York"}}], "possible_answer": {"lawsuit_info": {"case_number": ["XYZ123"], "year": [""], "location": ["", "all"]}}}
{"id": 198, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '12:00 PM'. Expected one of ['12pm', '12:00']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_197", "question": "Find the air quality index in San Diego at 12pm.", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": [{"get_air_quality_index": "{\"location\": \"San Diego\", \"time\": \"12:00 PM\"}"}], "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego", "time": "12:00 PM"}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}}
{"id": 201, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_type': 'gasoline'. Expected one of ['gas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_200", "question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": [{"calculate_emissions": "{\"distance\": 12000, \"fuel_type\": \"gasoline\", \"fuel_efficiency\": 25}"}], "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gasoline", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 25.0], "efficiency_reduction": [0, ""]}}}
{"id": 204, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_203", "question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": [{"get_air_quality": "{\"location\": \"Chicago\"}"}], "model_result_decoded": [{"get_air_quality": {"location": "Chicago"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 248, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'category': 'Physics'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_247", "question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}}, "model_result_raw": [{"historical_contrib_get_contrib": "{\"scientist\": \"Albert Einstein\", \"date\": \"1915-03-17\", \"category\": \"Physics\"}"}], "model_result_decoded": [{"historical_contrib_get_contrib": {"scientist": "Albert Einstein", "date": "1915-03-17", "category": "Physics"}}], "possible_answer": {"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}}
{"id": 268, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": [{"find_exhibition": "{\"location\": \"New York City, NY\", \"art_form\": \"sculpture\", \"month\": \"upcoming\", \"user_ratings\": \"high\"}"}], "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 272, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Optional parameter 'mode' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_271", "question": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "function": {"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}}, "model_result_raw": [{"analyze_structure": "{\"building_id\": \"B1004\", \"floors\": [2, 3, 4]}"}], "model_result_decoded": [{"analyze_structure": {"building_id": "B1004", "floors": [2, 3, 4]}}], "possible_answer": {"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}}
{"id": 312, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Los Angeles Lakers'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_311", "question": "Find me the detailed profile of basketball player Lebron James", "function": {"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to. Default to all teams if not specified."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}}, "model_result_raw": [{"sports_db_find_athlete": "{\"name\": \"Lebron James\", \"team\": \"Los Angeles Lakers\", \"sport\": \"Basketball\"}"}], "model_result_decoded": [{"sports_db_find_athlete": {"name": "Lebron James", "team": "Los Angeles Lakers", "sport": "Basketball"}}], "possible_answer": {"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}}
{"id": 317, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'female'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_316", "question": "Find the current world rank of a Tennis player, Serena Williams.", "function": {"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}}, "model_result_raw": [{"get_sport_ranking": "{\"sport\": \"Tennis\", \"player_name\": \"Serena Williams\", \"gender\": \"female\"}"}], "model_result_decoded": [{"get_sport_ranking": {"sport": "Tennis", "player_name": "Serena Williams", "gender": "female"}}], "possible_answer": {"get_sport_ranking": {"sport": ["Tennis"], "player_name": ["Serena Williams"], "gender": ["", "all"]}}}
{"id": 336, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Wrong number of dictionaries in the list."], "error_type": "value_error:list_dict_count", "prompt": {"id": "simple_335", "question": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck.", "function": {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}, "required": ["rank", "suit"]}}}, "model_result_raw": [{"find_card_in_deck": "{\"rank\": \"Queen\", \"suit\": \"Hearts\", \"deck\": [{\"rank\": \"Ace\", \"suit\": \"Spades\"}, {\"rank\": \"King\", \"suit\": \"Hearts\"}, {\"rank\": \"Queen\", \"suit\": \"Hearts\"}, {\"rank\": \"Jack\", \"suit\": \"Diamonds\"}]}"}], "model_result_decoded": [{"find_card_in_deck": {"rank": "Queen", "suit": "Hearts", "deck": [{"rank": "Ace", "suit": "Spades"}, {"rank": "King", "suit": "Hearts"}, {"rank": "Queen", "suit": "Hearts"}, {"rank": "Jack", "suit": "Diamonds"}]}}], "possible_answer": {"find_card_in_deck": {"rank": ["Queen"], "suit": ["Hearts"], "deck": [""]}}}
{"id": 359, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dish': 'cookies'. Expected one of ['cookie']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_358", "question": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare.", "function": {"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}}, "model_result_raw": [{"recipe_search": "{\"diet\": [\"Gluten Free\"], \"time_limit\": 30, \"dish\": \"cookies\"}"}], "model_result_decoded": [{"recipe_search": {"diet": ["Gluten Free"], "time_limit": 30, "dish": "cookies"}}], "possible_answer": {"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}}
{"id": 371, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": [{"safeway_order": "{\"location\": \"Palo Alto, CA\", \"items\": [\"olive oil\", \"rice\"], \"quantity\": [3, 5]}"}], "model_result_decoded": [{"safeway_order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'pack_size': [12]. Expected one of [[1, 1, 12]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": [{"walmart_purchase": "{\"loc\": \"San Jose\", \"product_list\": [\"apples\", \"rice\", \"bottled water\"], \"pack_size\": [12]}"}], "model_result_decoded": [{"walmart_purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'pumpkin', 'pumpkin', 'dozen eggs', 'dozen eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": [{"walmart_check_price": "{\"items\": [\"pumpkin\", \"pumpkin\", \"pumpkin\", \"dozen eggs\", \"dozen eggs\"], \"quantities\": [3, 2]}"}], "model_result_decoded": [{"walmart_check_price": {"items": ["pumpkin", "pumpkin", "pumpkin", "dozen eggs", "dozen eggs"], "quantities": [3, 2]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 396, "model_name": "open-mistral-nemo-2407-FC-Any", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Central Park'. Expected one of ['Central Park, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_395", "question": "Find the nearest parking lot within 2 miles of Central Park in New York.", "function": {"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}}, "model_result_raw": [{"parking_lot_find_nearest": "{\"location\": \"Central Park\", \"radius\": 2}"}], "model_result_decoded": [{"parking_lot_find_nearest": {"location": "Central Park", "radius": 2}}], "possible_answer": {"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}}