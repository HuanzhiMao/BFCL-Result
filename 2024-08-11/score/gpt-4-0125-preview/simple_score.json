{"accuracy": 0.955, "correct_count": 382, "total_count": 400}
{"id": 8, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Optional parameter 'unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_7", "question": "What is the circumference of a circle with a radius of 4 inches?", "function": {"name": "calculate_circumference", "description": "Calculates the circumference of a circle with a given radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle in the unit given."}, "unit": {"type": "string", "description": "The unit of measurement for the radius. Default is 'cm'."}}, "required": ["radius"]}}}, "model_result_raw": "[calculate_circumference(radius=4)]", "model_result_decoded": [{"calculate_circumference": {"radius": 4}}], "possible_answer": {"calculate_circumference": {"radius": [4], "unit": ["inches", "in"]}}}
{"id": 18, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'formatted': False. Expected one of [True, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_17", "question": "Find the prime factors of 450", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false. Default is true."}}, "required": ["number", "formatted"]}}}, "model_result_raw": "[get_prime_factors(number=450, formatted=False)]", "model_result_decoded": [{"get_prime_factors": {"number": 450, "formatted": false}}], "possible_answer": {"get_prime_factors": {"number": [450], "formatted": [true, ""]}}}
{"id": 56, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Function name 'biology.get_cell_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_55", "question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": "[bio.get_cell_info(cell_type='human', detailed=True)]", "model_result_decoded": [{"bio.get_cell_info": {"cell_type": "human", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}}
{"id": 83, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order=\"ascending\")]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 99, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}}, "model_result_raw": "[calculate_clock_angle(hours=18, minutes=30)]", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30}}], "possible_answer": {"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}}
{"id": 104, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 138, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_growth_rate': 6.0. Expected one of [0.06]."], "error_type": "value_error:others", "prompt": {"id": "simple_137", "question": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years.", "function": {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}}, "model_result_raw": "[calculate_stock_return(investment_amount=5000, annual_growth_rate=6.0, holding_period=5)]", "model_result_decoded": [{"calculate_stock_return": {"investment_amount": 5000, "annual_growth_rate": 6.0, "holding_period": 5}}], "possible_answer": {"calculate_stock_return": {"investment_amount": [5000], "annual_growth_rate": [0.06], "holding_period": [5], "dividends": ["", false]}}}
{"id": 151, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 3.0. Expected one of [0.03]."], "error_type": "value_error:others", "prompt": {"id": "simple_150", "question": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "function": {"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}}, "model_result_raw": "[calculate_roi(deposit=1000, annual_interest_rate=3.0, years=1)]", "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3.0, "years": 1}}], "possible_answer": {"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}}
{"id": 152, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": "Find the highest grossing bank in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country=\"U.S\", year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 153, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_yield': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "simple_152", "question": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "function": {"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "float", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}}, "model_result_raw": "[calculate_mutual_fund_balance(investment_amount=50000, annual_yield=5.0, years=3)]", "model_result_decoded": [{"calculate_mutual_fund_balance": {"investment_amount": 50000, "annual_yield": 5.0, "years": 3}}], "possible_answer": {"calculate_mutual_fund_balance": {"investment_amount": [50000], "annual_yield": [0.05], "years": [3]}}}
{"id": 215, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Optional parameter 'days_ahead' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_214", "question": "Search for upcoming month rock concerts in New York.", "function": {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}}, "model_result_raw": "[event_finder.find_upcoming(location=\"New York, NY\", genre=\"rock\")]", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "New York, NY", "genre": "rock"}}], "possible_answer": {"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}}
{"id": 235, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_234", "question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}}, "model_result_raw": "[history_eu.fetch_events(century=19, region='Northern', category='Wars'), history_eu.fetch_events(century=19, region='Southern', category='Wars'), history_eu.fetch_events(century=19, region='Eastern', category='Wars'), history_eu.fetch_events(century=19, region='Western', category='Wars')]", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Northern", "category": "Wars"}}, {"history_eu.fetch_events": {"century": 19, "region": "Southern", "category": "Wars"}}, {"history_eu.fetch_events": {"century": 19, "region": "Eastern", "category": "Wars"}}, {"history_eu.fetch_events": {"century": 19, "region": "Western", "category": "Wars"}}], "possible_answer": {"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}}
{"id": 268, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "[find_exhibition(location=\"New York\", art_form=\"sculpture\", month=\"upcoming\", user_ratings=\"high\")]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 278, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Optional parameter 'information' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_277", "question": "Find the working hours and ticket price of The British Museum for this weekend.", "function": {"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}}, "model_result_raw": "[museum_info(museum=\"The British Museum\", date=\"this weekend\")]", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "this weekend"}}], "possible_answer": {"museum_info": {"museum": ["The British Museum"], "date": ["this weekend", "2023-06-20", "06/20/2023", "Jun.20,2023"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}}
{"id": 360, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'ingredients': ['cheese', 'pasta']. Expected one of [['pasta', 'cheese']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_359", "question": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "function": {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}}, "model_result_raw": "[recipe_search(dietary_restriction=\"Vegetarian\", ingredients=[\"cheese\", \"pasta\"], servings=2)]", "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["cheese", "pasta"], "servings": 2}}], "possible_answer": {"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}}
{"id": 371, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['olive oil', 'five pound bag of rice']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location=\"Palo Alto, CA\", items=[\"olive oil\", \"five pound bag of rice\"], quantity=[3, 1])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "five pound bag of rice"], "quantity": [3, 1]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 376, "model_name": "gpt-4-0125-preview", "test_category": "simple", "valid": false, "error": ["Optional parameter 'store_location' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_375", "question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkins', 'eggs'], quantities=[3, 24])]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "eggs"], "quantities": [3, 24]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}