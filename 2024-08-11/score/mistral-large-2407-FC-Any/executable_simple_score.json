{"accuracy": 0.98, "correct_count": 98, "total_count": 100}
{"id": 53, "model_name": "mistral-large-2407-FC-Any", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result pattern for \"get_stock_history(stock_name='AAPL',interval='3mo',diffandsplits='true')\". Expect type Dict, but key '1701406800' not found in the model output."], "error_type": "executable_checker:wrong_result_type:dict_key_not_found", "prompt": {"id": "executable_simple_52", "question": "I've been tracking the performance of Apple's stock and I'm interested in taking a deeper dive into its history. I want to see the monthly trends and also check if there have been any splits or dividends issued recently. Can you pull up the history of AAPL for me with a monthly interval and include the stock splits and dividends information?", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}, "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='true')"], "execution_result": [{"1701406800": {"date": "01-12-2023", "date_utc": 1701406800, "open": 190.33, "high": 199.62, "low": 187.45, "close": 192.53, "volume": 1062774800, "adjclose": 192.02}, "1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 184.4, "volume": 1187219300, "adjclose": 183.92}, "1706763600": {"date": "01-02-2024", "date_utc": 1706763600, "open": 183.99, "high": 191.05, "low": 179.25, "close": 180.75, "volume": 1161627000, "adjclose": 180.28}, "1709269200": {"date": "01-03-2024", "date_utc": 1709269200, "open": 179.55, "high": 180.53, "low": 168.49, "close": 171.48, "volume": 1432782800, "adjclose": 171.25}, "1711944000": {"date": "01-04-2024", "date_utc": 1711944000, "open": 171.19, "high": 178.36, "low": 164.08, "close": 170.33, "volume": 1245717000, "adjclose": 170.1}, "1714536000": {"date": "01-05-2024", "date_utc": 1714536000, "open": 169.58, "high": 193, "low": 169.11, "close": 192.25, "volume": 1336537700, "adjclose": 191.99}, "1717214400": {"date": "01-06-2024", "date_utc": 1717214400, "open": 192.9, "high": 220.2, "low": 192.15, "close": 210.62, "volume": 1723984500, "adjclose": 210.62}, "1719806400": {"date": "01-07-2024", "date_utc": 1719806400, "open": 212.09, "high": 237.23, "low": 211.92, "close": 222.08, "volume": 1153099800, "adjclose": 222.08}, "1722484800": {"date": "01-08-2024", "date_utc": 1722484800, "open": 224.37, "high": 225.6, "low": 196, "close": 213.31, "volume": 465393500, "adjclose": 213.31}, "1723233601": {"date": "09-08-2024", "date_utc": 1723233601, "open": 212.1, "high": 216.78, "low": 211.98, "close": 216.24, "volume": 41126391, "adjclose": 216.24}}]}, "model_result_raw": [{"get_stock_history": "{\"stock_name\": \"AAPL\", \"interval\": \"3mo\", \"diffandsplits\": \"true\"}"}], "model_result_decoded": ["get_stock_history(stock_name='AAPL',interval='3mo',diffandsplits='true')"], "model_executed_output": {"1659326400": {"date": "01-08-2022", "date_utc": 1659326400, "open": 161.01, "high": 176.15, "low": 134.37, "close": 153.34, "volume": 5463102100, "adjclose": 151.62}, "1667275200": {"date": "01-11-2022", "date_utc": 1667275200, "open": 155.08, "high": 155.45, "low": 124.17, "close": 144.29, "volume": 4844231400, "adjclose": 142.87}, "1675227600": {"date": "01-02-2023", "date_utc": 1675227600, "open": 143.97, "high": 169.85, "low": 141.32, "close": 169.68, "volume": 3797175200, "adjclose": 168.29}, "1682913600": {"date": "01-05-2023", "date_utc": 1682913600, "open": 169.28, "high": 198.23, "low": 164.31, "close": 196.45, "volume": 3568323000, "adjclose": 195.14}, "1690862400": {"date": "01-08-2023", "date_utc": 1690862400, "open": 196.24, "high": 196.73, "low": 165.67, "close": 170.77, "volume": 3832745600, "adjclose": 169.87}, "1698811200": {"date": "01-11-2023", "date_utc": 1698811200, "open": 171, "high": 199.62, "low": 170.12, "close": 184.4, "volume": 3349580200, "adjclose": 183.67}, "1706763600": {"date": "01-02-2024", "date_utc": 1706763600, "open": 183.99, "high": 191.05, "low": 164.08, "close": 170.33, "volume": 3840126800, "adjclose": 169.88}, "1714536000": {"date": "01-05-2024", "date_utc": 1714536000, "open": 169.58, "high": 237.23, "low": 169.11, "close": 222.08, "volume": 4213622000, "adjclose": 221.78}, "1722484800": {"date": "01-08-2024", "date_utc": 1722484800, "open": 224.37, "high": 225.6, "low": 196, "close": 213.31, "volume": 465393500, "adjclose": 213.31}, "1723233601": {"date": "09-08-2024", "date_utc": 1723233601, "open": 212.08, "high": 216.78, "low": 211.98, "close": 216.24, "volume": 41126391, "adjclose": 216.24}}}
{"id": 91, "model_name": "mistral-large-2407-FC-Any", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"book_room(room_type='deluxe',price=1000,check_in_date='11-08-2024',check_out_date='15-08-2024',customer_id='123')\". Expected: {'customer_id': '123', 'room_number': 'deluxe', 'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'total_price': 1000}, but got: {'customer_id': '123', 'room_number': 'deluxe', 'check_in_date': '11-08-2024', 'check_out_date': '15-08-2024', 'total_price': 1000}."], "error_type": "executable_checker:wrong_result", "prompt": {"id": "executable_simple_90", "question": "I'm planning a business trip to New York, and I've decided to extend my stay to enjoy the city a bit more. I'd like to book a deluxe room for the duration of my trip. The dates I'm looking at are from August 11, 2024, to August 15, 2024. I've got a budget set aside for accommodation, and I'm willing to spend up to $1000 for a comfortable stay. My customer ID is 123. Could you go ahead and book that room for me?", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "string", "description": "The room type to book."}, "price": {"type": "float", "description": "The max price of the room. Default 0.0"}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='deluxe',price=1000,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"], "execution_result": [{"customer_id": "123", "room_number": "deluxe", "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 1000}]}, "model_result_raw": [{"book_room": "{\"room_type\": \"deluxe\", \"price\": 1000, \"check_in_date\": \"11-08-2024\", \"check_out_date\": \"15-08-2024\", \"customer_id\": \"123\"}"}], "model_result_decoded": ["book_room(room_type='deluxe',price=1000,check_in_date='11-08-2024',check_out_date='15-08-2024',customer_id='123')"], "model_executed_output": {"customer_id": "123", "room_number": "deluxe", "check_in_date": "11-08-2024", "check_out_date": "15-08-2024", "total_price": 1000}}