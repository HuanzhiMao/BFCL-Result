{"accuracy": 0.765, "correct_count": 153, "total_count": 200}
{"id": 8, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "multiple_function_7", "question": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?", "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "[\n    wildlife_population.assess_growth(species=\"deer\", location=\"Washington state\", duration=10),\n    ecological_impact.analyze(species=\"deer\", ecosystem=\"woodland\", location=\"Washington state\", timeframe=10)\n]", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state", "timeframe": 10}}], "possible_answer": {"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}}
{"id": 11, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_10", "question": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy.", "function": [{"name": "database.modify_columns", "description": "This function allows deletion or addition of columns in a database", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to modify."}, "table": {"type": "string", "description": "The name of the table to modify."}, "operation": {"type": "string", "description": "The operation to carry out on the table. Can be 'delete' or 'add'."}, "columns": {"type": "array", "description": "List of the columns to add or delete from the table.", "items": {"type": "string"}}}, "required": ["db_name", "table", "operation", "columns"]}}, {"name": "database.create_backup", "description": "This function creates a backup of the database before modification", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to create a backup of."}, "backup_location": {"type": "string", "description": "The file path where the backup should be stored."}, "timestamp": {"type": "boolean", "description": "Option to append a timestamp to the backup file name.", "default": "False"}}, "required": ["db_name", "backup_location"]}}]}, "model_result_raw": "Based on the question, the function 'database.modify_columns' can be used to remove the email addresses and social security numbers columns from the 'personal_data' table. Here is the function call:\n\n[{'name': 'database.modify_columns', 'parameters': {'db_name': 'employees', 'table': 'personal_data', 'operation': 'delete', 'columns': ['email_address', 'social_security_number']}}]", "possible_answer": {"database.modify_columns": {"db_name": ["employees"], "table": ["personal_data"], "operation": ["delete"], "columns": [["email", "ssn"], ["ssn", "email"], ["email", "social_security_number"], ["social_security_number", "email"], ["email", "social security number"], ["social security number", "email"]]}}}
{"id": 13, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_12", "question": "What is the year over year growth rate for company 'Tech Inc' with revenues of $1M in 2019 and $1.2M in 2020?", "function": [{"name": "corporate_finance.calculate_YOY_growth_rate", "description": "Calculate the year over year (YOY) growth rate for a company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company for which to calculate the YOY growth rate."}, "year1": {"type": "integer", "description": "The initial year."}, "year1_revenue": {"type": "integer", "description": "The revenue for the initial year."}, "year2": {"type": "integer", "description": "The subsequent year."}, "year2_revenue": {"type": "integer", "description": "The revenue for the subsequent year."}}, "required": ["company_name", "year1", "year1_revenue", "year2", "year2_revenue"]}}, {"name": "financial_ratios.calculate_ROE", "description": "Calculate the return on equity (ROE) for a company.", "parameters": {"type": "dict", "properties": {"net_income": {"type": "float", "description": "Net income for the period."}, "shareholder_equity": {"type": "float", "description": "Average shareholder equity for the period."}}, "required": ["net_income", "shareholder_equity"]}}, {"name": "financial_ratios.calculate_ROA", "description": "Calculate the return on assets (ROA) for a company.", "parameters": {"type": "dict", "properties": {"net_income": {"type": "float", "description": "Net income for the period."}, "total_assets": {"type": "float", "description": "Total average assets for the period."}}, "required": ["net_income", "total_assets"]}}]}, "model_result_raw": "['corporate_finance.calculate_YOY_growth_rate(company_name='Tech Inc', year1=2019, year1_revenue=1000000, year2=2020, year2_revenue=1200000)']", "possible_answer": {"corporate_finance.calculate_YOY_growth_rate": {"company_name": ["Tech Inc"], "year1": [2019], "year1_revenue": [1000000], "year2": [2020], "year2_revenue": [1200000]}}}
{"id": 14, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "multiple_function_13", "question": "How much revenue would company XYZ generate if we increase the sales units of product A by 10% while keeping the price the same?", "function": [{"name": "corporate_finance.product_price", "description": "Fetch the current selling price of the product.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that sells the product."}, "product": {"type": "string", "description": "The product whose price we want to fetch."}}, "required": ["company", "product"]}}, {"name": "corporate_finance.revenue_forecast", "description": "Estimate the revenue of a company by multiplying the sales units of the product with its selling price.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to calculate the revenue for."}, "product": {"type": "string", "description": "The product sold by the company."}, "sales_units_increase_percentage": {"type": "integer", "description": "Percentage increase in the sales units. This value is optional and defaults to zero if not provided."}}, "required": ["company", "product"]}}]}, "model_result_raw": "['corporate_finance.product_price(company=\"XYZ\", product=\"A\")', 'corporate_finance.revenue_forecast(company=\"XYZ\", product=\"A\", sales_units_increase_percentage=10)']", "model_result_decoded": [{"corporate_finance.product_price": {"company": "XYZ", "product": "A"}}, {"corporate_finance.revenue_forecast": {"company": "XYZ", "product": "A", "sales_units_increase_percentage": 10}}], "possible_answer": {"corporate_finance.revenue_forecast": {"company": ["XYZ"], "product": ["A", "Product A"], "sales_units_increase_percentage": [10]}}}
{"id": 22, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "multiple_function_21", "question": "I want to generate a sound of 440Hz frequency for 5 seconds. What is the function and how can I use it?", "function": [{"name": "play_sound_wave", "description": "This function is for playing a sound wave file.", "parameters": {"type": "dict", "properties": {"wave_file": {"type": "string", "description": "The filename of the sound wave file to be played."}, "volume": {"type": "float", "description": "The volume level at which the sound is to be played (1 is 100%).", "default": 1}}, "required": ["wave_file"]}}, {"name": "generate_sound_wave", "description": "This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.", "parameters": {"type": "dict", "properties": {"frequency": {"type": "integer", "description": "The frequency of the sound wave in Hz."}, "duration": {"type": "integer", "description": "The duration of the sound in seconds."}, "wave_type": {"type": "string", "enum": ["sine", "square", "sawtooth"], "description": "The waveform to be used to generate the sound.", "default": "sine"}}, "required": ["frequency", "duration"]}}]}, "model_result_raw": "[generate_sound_wave(frequency=440, duration=5), play_sound_wave(wave_file='sound_wave.wav', volume=1)]", "model_result_decoded": [{"generate_sound_wave": {"frequency": 440, "duration": 5}}, {"play_sound_wave": {"wave_file": "sound_wave.wav", "volume": 1}}], "possible_answer": {"generate_sound_wave": {"frequency": [440], "duration": [5], "wave_type": ["sine", ""]}}}
{"id": 26, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_25", "question": "What is the cheapest selling price for the game 'Assassins Creed Valhalla' in the PlayStation Store in the United States?", "function": [{"name": "video_games.store_currency", "description": "Fetches the currency used in a specific region in a gaming platform store.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "default": "True"}}, "required": ["platform"]}}, {"name": "video_games.on_sale", "description": "Checks if a particular game is currently on sale in a specific gaming platform store and in a specific region.", "parameters": {"type": "dict", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan. Default United States", "optional": "True"}}, "required": ["game_title", "platform"]}}, {"name": "video_games.store_price", "description": "Fetches the selling price of a specified game in a particular gaming platform store and in a specific region.", "parameters": {"type": "dict", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan. Default to United States"}}, "required": ["game_title", "platform"]}}]}, "model_result_raw": "['video_games.store_price(game_title='Assassins Creed Valhalla', platform='PlayStation', region='United States'), video_games.on_sale(game_title='Assassins Creed Valhalla', platform='PlayStation', region='United States')]", "possible_answer": {"video_games.store_price": {"game_title": ["Assassins Creed Valhalla"], "platform": ["PlayStation", "PS"], "region": ["United States", "US", ""]}}}
{"id": 27, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_26", "question": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies", "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "Based on the question, the function 'game_rewards.get' can be used to achieve the purpose. Here is the function call:\n\n[{'name': 'game_rewards.get', 'parameters': {'game': 'Fortnite', 'platform': 'Playstation', 'mission': 'MISSION_NAME', 'trophy': 'TROPHY_NAME'}}]\n\nPlease note that the 'mission' and 'trophy' parameters are optional, and you should replace 'MISSION_NAME' and 'TROPHY_NAME' with the actual mission and trophy names to get the rewards.", "possible_answer": {"game_rewards.get": {"game": ["Fortnite"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}}
{"id": 39, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_38", "question": "Find a book 'The Alchemist' in the library branches within New York city.", "function": [{"name": "library.reserve_book", "description": "Reserves a book in the library if available.", "parameters": {"type": "dict", "properties": {"book_id": {"type": "string", "description": "The id of the book to reserve."}, "branch_id": {"type": "string", "description": "The id of the library branch to reserve from."}, "return_date": {"type": "string", "description": "The date the book is to be returned (optional). Default is ''"}}, "required": ["book_id", "branch_id"]}}, {"name": "library.search_book", "description": "Searches for a book in the library within the specified city.", "parameters": {"type": "dict", "properties": {"book_name": {"type": "string", "description": "The name of the book to search for."}, "city": {"type": "string", "description": "The city to search within."}, "availability": {"type": "boolean", "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default is false"}, "genre": {"type": "string", "description": "The genre of the book to filter search (optional). Default is ''"}}, "required": ["book_name", "city"]}}]}, "model_result_raw": "['library.search_book(book_name='The Alchemist', city='New York')']", "possible_answer": {"library.search_book": {"book_name": ["The Alchemist"], "city": ["New York", "New York, NY", "New York City", "NYC", "NY"], "availability": ["", false], "genre": [""]}}}
{"id": 47, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Incorrect type for parameter 'elements'. Expected type array, got str. Parameter value: 'names'."], "sub_error_type": "type_error:simple", "model_output_item": {"sort_list": {"elements": "names"}}, "possible_answer_item": {"sort_list": {"elements": [["Sam", "Alice", "Jack"]], "order": ["asc", ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_46", "question": "Sort this list of names in ascending order: ['Sam', 'Alice', 'Jack']", "function": [{"name": "filter_list", "description": "Filters elements of a list based on a given condition", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to filter."}, "condition": {"type": "string", "description": "The condition to filter the elements on."}}, "required": ["elements", "condition"]}}, {"name": "sum_elements", "description": "Add all elements of a numeric list", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of numeric elements to add."}}, "required": ["elements"]}}, {"name": "sort_list", "description": "Sort the elements of a list in ascending or descending order", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to sort."}, "order": {"type": "string", "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.", "default": "asc"}}, "required": ["elements"]}}]}, "model_result_raw": "['sort_list(elements=names)']", "model_result_decoded": [{"sort_list": {"elements": "names"}}], "possible_answer": {"sort_list": {"elements": [["Sam", "Alice", "Jack"]], "order": ["asc", ""]}}}
{"id": 50, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'annual_rate': 0.025. Expected one of [2.5]."], "sub_error_type": "value_error:others", "model_output_item": {"calc_Compound_Interest": {"principle_amount": 1500, "duration": 2, "annual_rate": 0.025}}, "possible_answer_item": {"calc_Compound_Interest": {"principle_amount": [1500], "duration": [2], "annual_rate": [2.5], "compound_freq": ["", 1]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_49", "question": "Calculate the compound interest for an amount of 1500 for a duration of 2 years with an annual interest rate of 2.5%.", "function": [{"name": "calc_Compound_Interest", "description": "Compute compound interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "integer", "description": "The principle amount that is invested."}, "duration": {"type": "integer", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}, "compound_freq": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per unit time."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "future_value", "description": "Calculates the future value of an investment given an interest rate and time period.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "float", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate (as a decimal)."}, "time": {"type": "integer", "description": "The number of time periods the money is invested for."}, "num_compoundings": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per time period."}}, "required": ["initial_investment", "interest_rate", "time"]}}, {"name": "calc_Simple_Interest", "description": "Compute simple interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "float", "description": "The principle amount that is invested."}, "duration": {"type": "float", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}}, "required": ["principle_amount", "duration", "annual_rate"]}}]}, "model_result_raw": "['calc_Compound_Interest(principle_amount=1500, duration=2, annual_rate=0.025)']", "model_result_decoded": [{"calc_Compound_Interest": {"principle_amount": 1500, "duration": 2, "annual_rate": 0.025}}], "possible_answer": {"calc_Compound_Interest": {"principle_amount": [1500], "duration": [2], "annual_rate": [2.5], "compound_freq": ["", 1]}}}
{"id": 52, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'n_rolls' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}, "possible_answer_item": {"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_51", "question": "Calculate the probability of rolling a sum of 7 on a roll of two dice.", "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "[dice_roll_probability(desired_sum=7, sides_per_die=6)]", "model_result_decoded": [{"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}], "possible_answer": {"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}}
{"id": 53, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_52", "question": "I have 100 euro. How much is it in USD?", "function": [{"name": "unit_conversion", "description": "Convert a value from one unit to another.", "parameters": {"type": "dict", "properties": {"value": {"type": "float", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}, {"name": "currency_conversion", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}]}, "model_result_raw": "[{'name': 'currency_conversion', 'parameters': {'amount': 100, 'from_currency': 'EUR', 'to_currency': 'USD'}}]", "possible_answer": {"currency_conversion": {"amount": [100], "from_currency": ["Euro", "EUR"], "to_currency": ["USD", "US Dollar"]}}}
{"id": 54, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Function name 'linear_regression' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"random_forest_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "forecast_period": 5}}, "possible_answer_item": {"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_53", "question": "Predict the house prices for next 5 years based on interest rates and unemployment rates.", "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "['random_forest_regression(independent_var=[\"interest_rates\", \"unemployment_rates\"], dependent_var=\"house_prices\", forecast_period=5)']", "model_result_decoded": [{"random_forest_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "forecast_period": 5}}], "possible_answer": {"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}}
{"id": 60, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_59", "question": "Find lawyers specializing in criminal law near me in New York.", "function": [{"name": "car_rental", "description": "Rent a car near you based on your preference.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "car_type": {"type": "array", "items": {"type": "string"}, "description": "Type of cars that you want to rent."}, "fuel_type": {"type": "string", "description": "Preferred fuel type of car. Gas, diesel, electric, hybrid etc. Default 'gas'"}}, "required": ["location", "car_type"]}}, {"name": "lawyer_finder", "description": "Locate lawyers near you based on their specialization.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "specialization": {"type": "array", "items": {"type": "string"}, "description": "Specializations of lawyer that you are looking for."}, "experience": {"type": "integer", "description": "Experience in years that lawyer has. Default 1"}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "[{'name': 'lawyer_finder', 'parameters': {'location': 'New York', 'specialization': ['criminal law']}}]", "possible_answer": {"lawyer_finder": {"location": ["New York", "New York, NY", "NY", "New York City", "NYC"], "specialization": [["Criminal Law"], ["criminal law"]], "experience": ["", 1]}}}
{"id": 67, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_66", "question": "How much traffic should I expect from Las Vegas to Los Angeles this weekend?", "function": [{"name": "calculate_distance", "description": "Calculate distance between two locations.", "parameters": {"type": "dict", "properties": {"start_point": {"type": "string", "description": "Starting point of the journey."}, "end_point": {"type": "string", "description": "Ending point of the journey."}}, "required": ["start_point", "end_point"]}}, {"name": "traffic_estimate", "description": "Estimate traffic from one location to another for a specific time period.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting location for the journey."}, "end_location": {"type": "string", "description": "Ending location for the journey."}, "time_period": {"type": "string", "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend. Default 'now'"}}, "required": ["start_location", "end_location"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}]}, "model_result_raw": "Based on the question, the appropriate function to call would be 'traffic_estimate'. However, the question does not provide specific start and end locations. Here's the function call with placeholders for the locations:\n\n[traffic_estimate(start_location='Las Vegas', end_location='Los Angeles', time_period='weekend')]\n\nPlease note that the actual traffic estimate will depend on the specific start and end locations within Las Vegas and Los Angeles.", "possible_answer": {"traffic_estimate": {"start_location": ["Las Vegas"], "end_location": ["Los Angeles"], "time_period": ["weekend"]}}}
{"id": 78, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'Call' object has no attribute 'elts'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_77", "question": "Search for famous contemporary sculptures in New York.", "function": [{"name": "tourist_attraction.find", "description": "Search for tourist attractions based on type and location.", "parameters": {"type": "dict", "properties": {"attractionType": {"type": "string", "description": "Type of the attraction. E.g., monument, museum, park."}, "location": {"type": "string", "description": "Location or city where the attraction is."}}, "required": ["attractionType", "location"]}}, {"name": "artwork_search.find", "description": "Search for artworks based on type and location.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "Type of the artwork. E.g., painting, sculpture, installation."}, "location": {"type": "string", "description": "Location or city where the artwork is."}, "era": {"type": "string", "description": "Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default 'contemporary'", "optional": "True"}}, "required": ["type", "location"]}}, {"name": "park_search.find", "description": "Search for parks based on facilities and location.", "parameters": {"type": "dict", "properties": {"facilities": {"type": "array", "items": {"type": "string"}, "description": "List of facilities in the park."}, "location": {"type": "string", "description": "Location or city where the park is."}}, "required": ["facilities", "location"]}}]}, "model_result_raw": "artwork_search.find(type='sculpture', location='New York')", "possible_answer": {"artwork_search.find": {"type": ["sculpture"], "location": ["New York", "New York, NY", "New York City", "NYC"], "era": ["contemporary", ""]}}}
{"id": 79, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 7) (<unknown>, line 7)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_78", "question": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility.", "function": [{"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "dict", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}, {"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}]}, "model_result_raw": "Based on the question, the `museum_info` function can be used to retrieve the required information about the Natural History Museum in London. The function call would look like this:\n\n```python\nmuseum_info(museum='Natural History Museum', city='London', features=['timings', 'exhibitions', 'accessibility'])\n```\n\nThis function call will retrieve information about the museum's timings, exhibitions, and accessibility, which are the details requested in the question.", "possible_answer": {"museum_info": {"museum": ["Natural History Museum"], "city": ["London"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"]]}}}
{"id": 80, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'Call' object has no attribute 'elts'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_79", "question": "Find art exhibitions for the upcoming month in the Museum of Modern Art, New York.", "function": [{"name": "restaurant_info", "description": "Get restaurant information for a specific area.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location for which to find restaurants."}, "food_type": {"type": "string", "description": "Type of cuisine for which to find restaurants. Default 'any'", "enum": ["Italian", "Chinese", "Mexican", "American"]}}, "required": ["location"]}}, {"name": "exhibition_info", "description": "Get exhibition information for a specific museum.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "Name of the museum for which to find exhibitions."}, "month": {"type": "integer", "description": "Number of upcoming months for which to retrieve exhibition details. Default 1"}}, "required": ["museum_name"]}}]}, "model_result_raw": "exhibition_info(museum_name='Museum of Modern Art, New York', month=1)", "possible_answer": {"exhibition_info": {"museum_name": ["Museum of Modern Art", "MOMA", "Museum of Modern Art, New York"], "month": ["", 1]}}}
{"id": 81, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'services': ['Guitar Lessons', 'Violin Lessons']. Expected one of [['Violin Lessons']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}, "possible_answer_item": {"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_80", "question": "Find a local guitar shop that also offers violin lessons in Nashville.", "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[music_shop.find_nearby(location='Nashville, TN', services=['Guitar Lessons', 'Violin Lessons'])]", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}], "possible_answer": {"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}}
{"id": 92, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'ingredientLimit': 5. Expected one of [4]."], "sub_error_type": "value_error:others", "model_output_item": {"recipe.find": {"mainIngredient": "apple", "ingredientLimit": 5}}, "possible_answer_item": {"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_91", "question": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?", "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "['recipe.find'(mainIngredient='apple', ingredientLimit=5)]", "model_result_decoded": [{"recipe.find": {"mainIngredient": "apple", "ingredientLimit": 5}}], "possible_answer": {"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}}
{"id": 93, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'categories': ['vegetarian', 'gluten-free']. Expected one of [['vegan', 'gluten-free'], ['gluten-free', 'vegan']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"walmart.vegan_products": {"location": "Denver, CO", "categories": ["vegetarian", "gluten-free"]}}, "possible_answer_item": {"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_92", "question": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver.", "function": [{"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[walmart.vegan_products(location='Denver, CO', categories=['vegetarian', 'gluten-free'])]", "model_result_decoded": [{"walmart.vegan_products": {"location": "Denver, CO", "categories": ["vegetarian", "gluten-free"]}}], "possible_answer": {"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}}
{"id": 94, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. closing parenthesis ')' does not match opening parenthesis '[' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_93", "question": "Book a deluxe room for 2 nights at the Marriott hotel in New York and add breakfast as an extra service", "function": [{"name": "car.rental", "description": "Rent a car at the specified location for a specific number of days", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the car rental."}, "days": {"type": "integer", "description": "Number of days for which to rent the car."}, "car_type": {"type": "string", "description": "Type of the car to rent."}, "pick_up": {"type": "string", "description": "Location of where to pick up the car. Default ''"}}, "required": ["location", "days", "car_type"]}}, {"name": "hotel.book", "description": "Book a hotel room given the location, room type, and number of nights and additional services", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the hotel."}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}, "additional_services": {"type": "array", "items": {"type": "string", "description": "Additonal services that can be booked.", "enum": ["breakfast", "parking", "spa"]}, "description": "Additional services to be added. Default empty array"}}, "required": ["location", "roomType", "nights"]}}]}, "model_result_raw": "['hotel.book(location=\"New York\", roomType=\"deluxe\", nights=2, additional_services=[\"breakfast\"]')])", "possible_answer": {"hotel.book": {"location": ["New York", "New York, NY", "NYC"], "roomType": ["deluxe", "Deluxe"], "nights": [2], "additional_services": [["breakfast"]]}}}
{"id": 96, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_95", "question": "Convert 200 euros to US dollars using current exchange rate.", "function": [{"name": "currency_exchange.convert", "description": "Converts a value from one currency to another using the latest exchange rate.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount of money to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}, "live_conversion": {"type": "boolean", "description": "If true, use the latest exchange rate for conversion, else use the last known rate. Default false"}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion.convert", "description": "Converts a value from one unit to another.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}]}, "model_result_raw": "[{'name': 'currency_exchange.convert', 'parameters': {'amount': 200, 'from_currency': 'EUR', 'to_currency': 'USD', 'live_conversion': True}}]", "possible_answer": {"currency_exchange.convert": {"amount": [200], "from_currency": ["EUR"], "to_currency": ["USD"], "live_conversion": [true]}}}
{"id": 114, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'trait_values': [0.8]. Expected one of [[0.8, 0.7]]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"calculate_fitness": {"trait_values": [0.8], "trait_contributions": [0.4, 0.6]}}, "possible_answer_item": {"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_113", "question": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.", "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is empty array."}}, "required": ["loc", "product_list"]}}, {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer", "maximum": 400}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "['calculate_fitness(trait_values=[0.8], trait_contributions=[0.4, 0.6])']", "model_result_decoded": [{"calculate_fitness": {"trait_values": [0.8], "trait_contributions": [0.4, 0.6]}}], "possible_answer": {"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}}
{"id": 119, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_118", "question": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.", "function": [{"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is 'anytime'."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}, {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for 'all' types by default."}}, "required": ["company_name", "location", "year"]}}, {"name": "imdb.find_movies_by_actor", "description": "Searches the database to find all movies by a specific actor within a certain year.", "parameters": {"type": "dict", "properties": {"actor_name": {"type": "string", "description": "The name of the actor."}, "year": {"type": "integer", "description": "The specific year to search in."}, "category": {"type": "string", "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional. Default is 'all'."}}, "required": ["actor_name", "year"]}}]}, "model_result_raw": "[{'name': 'imdb.find_movies_by_actor', 'parameters': {'actor_name': 'Leonardo DiCaprio', 'year': 2010}}]", "possible_answer": {"imdb.find_movies_by_actor": {"actor_name": ["Leonardo DiCaprio"], "year": [2010], "category": ["", "all"]}}}
{"id": 120, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_119", "question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "dict", "properties": {"purchase_price": {"type": "float", "description": "The price the stock was bought at."}, "sale_price": {"type": "float", "description": "The price the stock was sold at."}, "dividend": {"type": "float", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed."}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "[{'name': 'database.query', 'parameters': {'table': 'user', 'conditions': [{'field': 'age', 'operation': '>', 'value': 25}, {'field': 'job', 'operation': '=', 'value': 'engineer'}]}}]", "possible_answer": {"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}}
{"id": 123, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_122", "question": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.", "function": [{"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}, {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "dict", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "float", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}]}, "model_result_raw": "[{'name': 'run_linear_regression', 'predictors': ['Age', 'Income', 'Education'], 'target': 'Purchase_Amount', 'standardize': True}]", "possible_answer": {"run_linear_regression": {"predictors": [["Age", "Income", "Education"], ["Age", "Education", "Income"], ["Income", "Age", "Education"], ["Income", "Education", "Age"], ["Education", "Age", "Income"], ["Education", "Income", "Age"]], "target": ["Purchase_Amount"], "standardize": [true]}}}
{"id": 124, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_123", "question": "Calculate the probability of drawing a king from a deck of cards.", "function": [{"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}, {"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "dict", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}]}, "model_result_raw": "Based on the question, the function \"calculate_probability\" can be used to calculate the probability of drawing a king from a deck of cards. Here is the function call:\n\ncalculate_probability(total_outcomes=52, favorable_outcomes=4)\n\nExplanation:\n\n* The total number of possible outcomes is 52 (the total number of cards in a deck).\n* The number of favorable outcomes is 4 (the number of kings in a deck of cards).\n* The function call is: calculate_probability(total_outcomes=52, favorable_outcomes=4)\n\nThe function will return the probability of drawing a king from a deck of cards, rounded to 2 decimal places.", "possible_answer": {"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}}
{"id": 125, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_124", "question": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "float", "description": "The base number."}, "exponent": {"type": "float", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is None. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}, {"name": "probabilities.calculate_single", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "The total number of outcomes."}, "event_outcomes": {"type": "integer", "description": "The number of outcomes where the event occurs."}, "round": {"type": "integer", "description": "Round the answer to a specified number of decimal places. Defaults to 2."}}, "required": ["total_outcomes", "event_outcomes"]}}, {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "dict", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}]}, "model_result_raw": "Based on the question, the function 'probabilities.calculate_single' can be used to calculate the probability of drawing a king from a standard deck of 52 cards. Here is the function call:\n\n[probabilities.calculate_single(total_outcomes=52, event_outcomes=4)]\n\nThe 'total_outcomes' parameter is set to 52, representing the total number of cards in the deck, and the 'event_outcomes' parameter is set to 4, representing the number of kings in the deck.", "possible_answer": {"probabilities.calculate_single": {"total_outcomes": [52], "event_outcomes": [4], "round": ["", 2]}}}
{"id": 130, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'annual_rate': 0.004166666666666667. Expected one of [5]."], "sub_error_type": "value_error:others", "model_output_item": {"compound_interest": {"principal": 10000, "annual_rate": 0.004166666666666667, "compounding_freq": "monthly", "time_in_years": 60}}, "possible_answer_item": {"compound_interest": {"principal": [10000], "annual_rate": [5], "compounding_freq": ["monthly"], "time_in_years": [5]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_129", "question": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'"}}, "required": ["company_name", "location", "year"]}}, {"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "compound_interest(principal=10000, annual_rate=0.05/12, compounding_freq='monthly', time_in_years=5*12)", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.004166666666666667, "compounding_freq": "monthly", "time_in_years": 60}}], "possible_answer": {"compound_interest": {"principal": [10000], "annual_rate": [5], "compounding_freq": ["monthly"], "time_in_years": [5]}}}
{"id": 135, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'details' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}, "possible_answer_item": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_134", "question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional). Defaults to 'USA'"}}, "required": ["game", "season"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "[crime_record.get_record(case_number='CA123456', county='San Diego')]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}}
{"id": 137, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'type': 'violent crime'. Expected one of ['violent', 'Violent']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_crime_rate": {"city": "San Francisco", "state": "CA", "type": "violent crime", "year": 2020}}, "possible_answer_item": {"get_crime_rate": {"city": ["San Francisco", "San Francisco, CA", "SF"], "state": ["California", "CA"], "type": ["violent", "Violent"], "year": [2020]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_136", "question": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "function": [{"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime. Default ''"}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data. Defaults to 2024."}}, "required": ["city", "state"]}}, {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}]}, "model_result_raw": "['get_crime_rate(city=\"San Francisco\", state=\"CA\", type=\"violent crime\", year=2020)']", "model_result_decoded": [{"get_crime_rate": {"city": "San Francisco", "state": "CA", "type": "violent crime", "year": 2020}}], "possible_answer": {"get_crime_rate": {"city": ["San Francisco", "San Francisco, CA", "SF"], "state": ["California", "CA"], "type": ["violent", "Violent"], "year": [2020]}}}
{"id": 139, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'Call' object has no attribute 'elts'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_138", "question": "How to obtain the detailed case information of the R vs Adams legal case?", "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. Default is false."}}, "required": ["case_id", "details"]}}, {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "float", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "include_dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}]}, "model_result_raw": "legal_case.fetch(case_id='R vs Adams', details=True)", "possible_answer": {"legal_case.fetch": {"case_id": ["R vs Adams", "R_vs_Adams"], "details": [true]}}}
{"id": 140, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'Call' object has no attribute 'elts'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_139", "question": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}, {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is 'all'."}}, "required": ["company_name", "year"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}]}, "model_result_raw": "lawsuit_details.find(company_name='Apple Inc.', year=2010)", "possible_answer": {"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent"]}}}
{"id": 141, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_140", "question": "Find the lawsuits filed against the company Google in California in the year 2020.", "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'"}}, "required": ["company_name", "location", "year"]}}, {"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}]}, "model_result_raw": "Based on the question, the function `lawsuits_search` can be used to find the lawsuits filed against the company Google in California in the year 2020. Here is the function call:\n\n`lawsuits_search(company_name='Google', location='California', year=2020)`", "possible_answer": {"lawsuits_search": {"company_name": ["Google"], "location": ["California", "CA"], "year": [2020], "case_type": ["", "all"]}}}
{"id": 147, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_146", "question": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "[\"restaurant.find_nearby(location='Seattle, WA', cuisine='Chinese', max_distance=10)\"]", "possible_answer": {"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA"], "cuisine": ["Chinese"], "max_distance": [10]}}}
{"id": 149, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_148", "question": "Give me detail information about stocks of Apple Inc.", "function": [{"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time. Default ''"}}, "required": ["location", "country"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}]}, "model_result_raw": "Based on the question, the 'get_stock_info' function can be used to retrieve information about Apple Inc. stocks. Here is the function call:\n\n[get_stock_info(company_name='Apple Inc.', detail_level='detailed')]\n\nNote: The 'market' parameter is not specified as it is optional and the default value 'NASDAQ' is used.", "possible_answer": {"get_stock_info": {"company_name": ["Apple Inc.", "Apple"], "detail_level": ["detailed"], "market": ["NASDAQ", ""]}}}
{"id": 150, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_149", "question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "[{'name': 'sentiment_analysis', 'parameters': {'text': 'I love the food here! It's always fresh and delicious.', 'language': 'en'}}]", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}}
{"id": 162, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_161", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": [{"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "dict", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}, {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'high'"}}, "required": ["location", "art_form"]}}, {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "dict", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional. Default 2024"}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}]}, "model_result_raw": "```python\nfind_exhibition(location='New York', art_form='sculpture', month=None, user_ratings='high')\n```", "possible_answer": {"find_exhibition": {"location": ["New York", "New York, NY", "New York City", "NYC", "NY"], "art_form": ["sculpture", "modern sculpture"], "month": ["upcoming", "next month", "upcoming month", "next", ""], "user_ratings": ["high", ""]}}}
{"id": 171, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_170", "question": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}, {"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}, {"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues. Default 'all'"}}, "required": ["player_name", "season"]}}]}, "model_result_raw": "[\n    {\n        \"name\": \"soccer_stat.get_player_stats\",\n        \"parameters\": {\n            \"player_name\": \"Cristiano Ronaldo\",\n            \"season\": \"2019-2020\"\n        }\n    }\n]", "possible_answer": {"soccer_stat.get_player_stats": {"player_name": ["Cristiano Ronaldo"], "season": ["2019-2020"], "league": ["all", ""]}}}
{"id": 176, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'gender': 'woman'. Expected one of ['women']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"sports_ranking.get_top_player": {"sport": "tennis", "gender": "woman"}}, "possible_answer_item": {"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_175", "question": "Who is ranked as the top player in woman tennis?", "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "float", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter. Default is ''"}}, "required": ["budget", "type"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "float", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "float", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "float", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}, {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "[sports_ranking.get_top_player(sport='tennis', gender='woman')]", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "tennis", "gender": "woman"}}], "possible_answer": {"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}}
{"id": 180, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_179", "question": "What is the probability of getting a full house in poker?", "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital. Default is ''.", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}, {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "[\"poker_probability.full_house(deck_size=52, hand_size=5)\"]", "possible_answer": {"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}}
{"id": 181, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_180", "question": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "function": [{"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is ''"}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}, {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}, {"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}]}, "model_result_raw": "['game_stats.fetch_player_statistics(game='Zelda', username='Sam', platform='Switch')]", "possible_answer": {"game_stats.fetch_player_statistics": {"game": ["Zelda"], "username": ["Sam"], "platform": ["Switch", "Nintendo Switch"]}}}
{"id": 184, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'recipe': 'Beef Lasagna Recipe'. Expected one of ['Beef Lasagna']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "Beef Lasagna Recipe"}}, "possible_answer_item": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_183", "question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}, {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner') Default is ''"}}, "required": ["website", "recipe"]}}]}, "model_result_raw": "[recipe_info.get_calories(website='Foodnetwork.com', recipe='Beef Lasagna Recipe')]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "Beef Lasagna Recipe"}}], "possible_answer": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}}
{"id": 190, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_189", "question": "Convert time 3pm from New York time zone to London time zone.", "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'USA'"}}, "required": ["energy_type", "usage_duration"]}}, {"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "dict", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}]}, "model_result_raw": "[{'name': 'timezone.convert', 'parameters': {'time': '3pm', 'from_timezone': 'America/New_York', 'to_timezone': 'Europe/London'}}]", "possible_answer": {"timezone.convert": {"time": ["3pm"], "from_timezone": ["America/New_York", "New York", "New York, NY", "NY", "NYC", "Eastern Standard Time", "EST"], "to_timezone": ["Europe/London", "London", "British Summer Time", "BST", "Greenwich Mean Time", "GMT"]}}}
{"id": 191, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_190", "question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "[{'name': 'book_hotel', 'parameters': {'hotel_name': 'Hilton Hotel', 'location': 'Chicago', 'room_type': 'single room', 'start_date': '10th December 2022', 'nights': 2}}]", "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single", "Single"], "start_date": ["2022-12-10", "10/12/2022", "Dec.10,2022", "10th December 2022", "10 December 2022"], "nights": [2]}}}
{"id": 194, "model_name": "databricks-dbrx-instruct", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'end_location': 'The Louvre Museum'. Expected one of ['Louvre Museum']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"maps.get_distance_duration": {"start_location": "Eiffel Tower", "end_location": "The Louvre Museum"}}, "possible_answer_item": {"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_193", "question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": [{"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "dict", "properties": {"number": {"type": "float", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}, {"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "dict", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating. Default is 0.0."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}, {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "float", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "['maps.get_distance_duration(start_location=\"Eiffel Tower\", end_location=\"The Louvre Museum\")']", "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "Eiffel Tower", "end_location": "The Louvre Museum"}}], "possible_answer": {"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}}