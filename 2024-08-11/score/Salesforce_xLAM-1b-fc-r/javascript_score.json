{"accuracy": 0.72, "correct_count": 36, "total_count": 50}
{"id": 3, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'status'. Expected type String, got list. Parameter value: ['completed', 'failed']."], "error_type": "type_error:js", "prompt": {"id": "javascript_2", "question": "How can I extract the last transaction ID that has a status of 'completed' or 'failed' from a database log located at '/var/log/db.log', using 'utf-8' encoding, and process the information with a processing function?", "function": {"name": "extractLastTransactionId", "description": "This function scans a database log file for lines indicating transaction completion or failure, extracting the last transaction ID that matches the criteria. It uses a processing function `processFunction` to further handle the extracted transaction ID.", "parameters": {"type": "dict", "properties": {"filepath": {"type": "String", "description": "The path to the database log file to be examined."}, "status": {"type": "array", "items": {"type": "String"}, "description": "An array of statuses to search for within the log file, indicating the end of a transaction."}, "encoding": {"type": "String", "description": "The encoding of the log file."}, "processFunction": {"type": "any", "description": "A function that processes the extracted transaction ID."}}, "required": ["filepath", "status", "encoding", "processFunction"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"extractLastTransactionId\", \"arguments\": {\"filepath\": \"/var/log/db.log\", \"status\": [\"completed\", \"failed\"], \"encoding\": \"utf-8\", \"processFunction\": \"function(transactionId) { return transactionId; }\"}}]}", "model_result_decoded": [{"extractLastTransactionId": {"filepath": "/var/log/db.log", "status": ["completed", "failed"], "encoding": "utf-8", "processFunction": "function(transactionId) { return transactionId; }"}}], "possible_answer": {"extractLastTransactionId": {"filepath": ["/var/log/db.log"], "status": [["completed", "failed"]], "encoding": ["utf-8"], "processFunction": ["processFunction"]}}}
{"id": 4, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'coordinates'. Expected type String, got list. Parameter value: ['30.0', '60.0']."], "error_type": "type_error:js", "prompt": {"id": "javascript_3", "question": "How can I send a 'submit' action to a React form with the ID 'loginForm' at a coordinate that is 30% from the top and 60% from the left?", "function": {"name": "submitAtCoordinate", "description": "This function sends a submit action to a React form element at a specific position determined by coordinates relative to its bounding box.", "parameters": {"type": "dict", "properties": {"action": {"type": "String", "description": "The type of action to send."}, "formId": {"type": "String", "description": "The ID of the React form element to which to send the action."}, "coordinates": {"type": "array", "items": {"type": "float"}, "description": "An array of two numbers representing the x and y coordinates relative to the element's bounding box, in percentages."}}, "required": ["action", "formId", "coordinates"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"submitAtCoordinate\", \"arguments\": {\"action\": \"submit\", \"formId\": \"loginForm\", \"coordinates\": [\"30.0\", \"60.0\"]}}]}", "model_result_decoded": [{"submitAtCoordinate": {"action": "submit", "formId": "loginForm", "coordinates": ["30.0", "60.0"]}}], "possible_answer": {"submitAtCoordinate": {"action": ["submit"], "formId": ["loginForm"], "coordinates": [[0.6, 0.3]]}}}
{"id": 6, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Wrong number of parameters for dictionary."], "error_type": "value_error:dict_items", "prompt": {"id": "javascript_5", "question": "Given the manageReactState function, which encapsulates state management logic for React applications including shared state handling and performance optimization, write a line of code to initialize this function. Assume you have an initial state object `initialStateObject`, a map of reducer functions `reducersMap`, a logger middleware `loggerMiddleware`, and an application of middleware as enhancers. Also, assume the existence of custom hooks `useStateSelectorHook` and `useDispatchActionHook` for state access and updates within React components. Use applyMiddleware('myMiddleWare') as enhancers.", "function": {"name": "manageReactState", "description": "This function encapsulates the logic for state management in a React application, offering solutions for shared state handling and performance optimization.", "parameters": {"type": "dict", "properties": {"store": {"type": "dict", "properties": {"initialState": {"type": "dict", "description": "The initial state object of the React application."}, "reducers": {"type": "dict", "description": "A collection of reducer functions to handle state changes."}, "middlewares": {"type": "array", "items": {"type": "String"}, "description": "An array of middleware functions for intercepting and potentially altering actions or state changes."}, "enhancers": {"type": "array", "items": {"type": "String"}, "description": "An array of store enhancers for extending store capabilities."}}, "description": "Configuration object for the application's central store."}, "context": {"type": "any", "description": "The React context object for providing and consuming the store in the component tree."}, "hooks": {"type": "dict", "description": "Custom hooks for accessing and updating the state within React components."}}, "required": ["store", "context", "hooks"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"manageReactState\", \"arguments\": {\"store\": \"{\\\"initialState\\\": {...}, \\\"reducers\\\": {...}, \\\"middlewares\\\": [\\\"loggerMiddleware\\\"], \\\"enhancers\\\": [\\\"applyMiddleware('myMiddleWare')\\\"]}\", \"context\": \"{}\", \"hooks\": \"{\\\"useStateSelectorHook\\\": \\\"...\\\", \\\"useDispatchActionHook\\\": \\\"...\\\"}\"}}]}", "model_result_decoded": [{"manageReactState": {"store": "{\"initialState\": {...}, \"reducers\": {...}, \"middlewares\": [\"loggerMiddleware\"], \"enhancers\": [\"applyMiddleware('myMiddleWare')\"]}", "context": "{}", "hooks": "{\"useStateSelectorHook\": \"...\", \"useDispatchActionHook\": \"...\"}"}}], "possible_answer": {"manageReactState": {"store": [{"initialState": ["initialStateObject"], "reducers": ["reducersMap"], "middlewares": [["loggerMiddleware"]], "enhancers": [["applyMiddleware('myMiddleWare')"]]}], "context": ["React.createContext()"], "hooks": [{"useStateSelector": "useStateSelectorHook", "useDispatchAction": "useDispatchActionHook"}]}}}
{"id": 13, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Optional parameter 'handleErrors' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "javascript_12", "question": "How can I implement a 'dataFetch' operation with an API endpoint URL of 'https://api.example.com/data', expecting the response to be a JSON object containing '{\"key\": \"value\"}', given a request configuration object '{\"method\": \"GET\"}'?", "function": {"name": "performDataFetch", "description": "This function fetches data from a specified API endpoint using the provided request configuration, checks the response against an expected JSON object, and handles any potential errors. It supports various request methods like GET or POST.", "parameters": {"type": "dict", "properties": {"apiEndpoint": {"type": "String", "description": "The URL of the API endpoint from which the data will be fetched."}, "requestConfig": {"type": "dict", "properties": {"method": {"type": "String", "description": "The HTTP method to be used for the request."}, "headers": {"type": "dict", "description": "Any headers to be included in the request."}, "body": {"type": "String", "description": "The request payload, if needed for methods like POST."}}, "description": "The configuration object for the API request."}, "expectedResponse": {"type": "dict", "description": "The JSON object expected to be returned by the API call."}, "handleErrors": {"type": "Boolean", "description": "If true, the function will handle errors gracefully and provide appropriate feedback. Default false"}}, "required": ["apiEndpoint", "requestConfig", "expectedResponse"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"performDataFetch\", \"arguments\": {\"apiEndpoint\": \"https://api.example.com/data\", \"requestConfig\": \"{\\\"method\\\": \\\"GET\\\"}\", \"expectedResponse\": \"{\\\"key\\\": \\\"value\\\"}\"}}]}", "model_result_decoded": [{"performDataFetch": {"apiEndpoint": "https://api.example.com/data", "requestConfig": "{\"method\": \"GET\"}", "expectedResponse": "{\"key\": \"value\"}"}}], "possible_answer": {"performDataFetch": {"apiEndpoint": ["https://api.example.com/data"], "requestConfig": [{"method": ["GET"]}], "expectedResponse": [{"key": ["value"]}], "handleErrors": [true]}}}
{"id": 14, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Invalid value for parameter 'userData': ['1', '2', '3', '4', '5']. Expected one of [['userDataArray']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "javascript_13", "question": "How can I generate a dynamic chart with user-provided data `userDataArray` and apply a scaling factor of 3 for the axis values, linking it to a given dashboard `dashboardElement`?", "function": {"name": "DynamicChartGenerator", "description": "This function creates a dynamic chart based on user input, applies a scaling factor to the axis values, and integrates the chart into a specified dashboard for display.", "parameters": {"type": "dict", "properties": {"userData": {"type": "array", "items": {"type": "String"}, "description": "The data provided by the user to plot on the chart."}, "scalingFactor": {"type": "float", "description": "A scaling factor applied to the chart's axis values. Optional parameter."}, "dashboard": {"type": "any", "description": "The dashboard where the chart will be displayed."}, "options": {"type": "dict", "description": "Additional configuration options for the chart. Default empty dict"}}, "required": ["userData", "scalingFactor", "dashboard"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"DynamicChartGenerator\", \"arguments\": {\"userData\": \"[1, 2, 3, 4, 5]\", \"scalingFactor\": \"3\", \"dashboard\": \"dashboardElement\"}}]}", "model_result_decoded": [{"DynamicChartGenerator": {"userData": "[1, 2, 3, 4, 5]", "scalingFactor": "3", "dashboard": "dashboardElement"}}], "possible_answer": {"DynamicChartGenerator": {"userData": [["userDataArray"]], "scalingFactor": [3.0], "dashboard": ["dashboardElement"], "options": ["", {}]}}}
{"id": 20, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'textures'. Expected type String, got list. Parameter value: ['textureList']."], "error_type": "type_error:js", "prompt": {"id": "javascript_19", "question": "How can I configure a ShaderMaterial for a Three.js scene with specific properties 'materialProps', using textures 'textureList', and within the 3D object 'meshObject'?", "function": {"name": "configureShaderMaterial", "description": "This function configures a ShaderMaterial for a Three.js scene, applying custom shaders, textures, and properties based on the provided data, texture list, and 3D object.", "parameters": {"type": "dict", "properties": {"property": {"type": "dict", "description": "The properties specific to the ShaderMaterial being configured."}, "textures": {"type": "array", "items": {"type": "String"}, "description": "A list of textures to be used in the ShaderMaterial."}, "object3D": {"type": "any", "description": "The 3D object within which the ShaderMaterial is being applied."}}, "required": ["property", "textures", "object3D"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"configureShaderMaterial\", \"arguments\": {\"property\": \"materialProps\", \"textures\": [\"textureList\"], \"object3D\": \"meshObject\"}}]}", "model_result_decoded": [{"configureShaderMaterial": {"property": "materialProps", "textures": ["textureList"], "object3D": "meshObject"}}], "possible_answer": {"configureShaderMaterial": {"property": ["materialProps"], "textures": ["textureList"], "object3D": ["meshObject"]}}}
{"id": 24, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'options'. Expected type String, got dict. Parameter value: {'issuer': 'myapp.net', 'role': 'admin', 'algorithm': 'HS256'}."], "error_type": "type_error:js", "prompt": {"id": "javascript_23", "question": "How can I generate an authorization token for a user with username 'johndoe', valid for '3600' seconds, issued by 'myapp.net', with a role of 'admin', and encoded with 'HS256' algorithm?", "function": {"name": "createAuthToken", "description": "This function generates an authorization token with user details, validity, issuer, role, and encoding algorithm.", "parameters": {"type": "dict", "properties": {"username": {"type": "String", "description": "The username of the user for whom the token is being created."}, "validity": {"type": "integer", "description": "The number of seconds the token remains valid."}, "options": {"type": "dict", "description": "options dictionary, default empty dictionary", "properties": {"issuer": {"type": "", "description": "The entity that issued the token."}, "role": {"type": "String", "description": "The role of the user in the system."}, "algorithm": {"type": "String", "description": "The encoding algorithm to be used for token generation."}}}}, "required": ["username", "options"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"createAuthToken\", \"arguments\": {\"username\": \"johndoe\", \"validity\": \"3600\", \"options\": {\"issuer\": \"myapp.net\", \"role\": \"admin\", \"algorithm\": \"HS256\"}}}]}", "model_result_decoded": [{"createAuthToken": {"username": "johndoe", "validity": "3600", "options": {"issuer": "myapp.net", "role": "admin", "algorithm": "HS256"}}}], "possible_answer": {"createAuthToken": {"username": ["johndoe"], "validity": [3600], "options": [{"issuer": ["myapp.net"], "role": ["admin"], "algorithm": ["HS256"]}]}}}
{"id": 25, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'array'. Expected type array, got str. Parameter value: '3, 1, 2, 1, 4, 3'."], "error_type": "type_error:simple", "prompt": {"id": "javascript_24", "question": "What is the best way to extract the unique elements from an array and return them sorted in ascending order? For a list of numbers 3 1 2 1 4 3", "function": {"name": "getUniqueSorted", "description": "This function takes an array of elements and returns a new array of unique elements sorted in ascending order. It does not require any additional parameters for sorting.", "parameters": {"type": "dict", "properties": {"array": {"type": "array", "items": {"type": "integer"}, "description": "The array from which to extract unique elements and sort them."}}, "required": ["array"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"getUniqueSorted\", \"arguments\": {\"array\": \"3, 1, 2, 1, 4, 3\"}}]}", "model_result_decoded": [{"getUniqueSorted": {"array": "3, 1, 2, 1, 4, 3"}}], "possible_answer": {"getUniqueSorted": {"array": [[3, 1, 2, 1, 4, 3]]}}}
{"id": 26, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'validationFlags'. Expected type String, got list. Parameter value: ['isRequired', 'isValidEmail']."], "error_type": "type_error:js", "prompt": {"id": "javascript_25", "question": "How can I track the 'submitForm' action on a 'formHandler' object but only when the form has is required and is valid email validation flags set?", "function": {"name": "trackSubmitWithValidation", "description": "This function tracks the 'submitForm' action on a given object. It only logs the submission when specific validation flags are set; if the flags are not set, the original action is performed without tracking.", "parameters": {"type": "dict", "properties": {"obj": {"type": "any", "description": "The object with the 'submitForm' action to track."}, "validationFlags": {"type": "array", "items": {"type": "String"}, "description": "An array of validation flags required to trigger tracking. Possible options are isRequired, isValidEmail."}}, "required": ["obj", "validationFlags"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"trackSubmitWithValidation\", \"arguments\": {\"obj\": \"formHandler\", \"validationFlags\": [\"isRequired\", \"isValidEmail\"]}}]}", "model_result_decoded": [{"trackSubmitWithValidation": {"obj": "formHandler", "validationFlags": ["isRequired", "isValidEmail"]}}], "possible_answer": {"trackSubmitWithValidation": {"obj": ["formHandler"], "validationFlags": [["isRequired", "isValidEmail"]]}}}
{"id": 29, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'library'. Expected type array, got str. Parameter value: 'library'."], "error_type": "type_error:simple", "prompt": {"id": "javascript_28", "question": "How can I retrieve a list of books bookA,bookB, bookC with a specific author J.K. Rowling from a collection called 'library'?", "function": {"name": "filterBooksByAuthor", "description": "This function filters through a collection of books within a library to find all books that are written by a specific author, returning a list of books that match the criteria.", "parameters": {"type": "dict", "properties": {"library": {"type": "array", "items": {"type": "String"}, "description": "The collection of book objects to filter through."}, "author": {"type": "String", "description": "The name of the author whose books you want to find."}}, "required": ["library", "author"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"filterBooksByAuthor\", \"arguments\": {\"library\": \"library\", \"author\": \"J.K. Rowling\"}}]}", "model_result_decoded": [{"filterBooksByAuthor": {"library": "library", "author": "J.K. Rowling"}}], "possible_answer": {"filterBooksByAuthor": {"library": [["bookA", "bookB", "bookC"]], "author": ["J.K. Rowling"]}}}
{"id": 38, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'statements'. Expected type String, got list. Parameter value: ['shapeStatements']."], "error_type": "type_error:js", "prompt": {"id": "javascript_37", "question": "How can I add statements for initializing properties named 'width' and 'height' for a receiver object named 'shape' into an existing statements array named 'shapeStatements'?", "function": {"name": "addInitializedPropertyStatements", "description": "This function adds statements for initializing properties to an array of statements. It is designed to work with TypeScript's AST manipulation.", "parameters": {"type": "dict", "properties": {"statements": {"type": "array", "items": {"type": "String"}, "description": "The array of statements to which the new initialized property statements will be added."}, "property": {"type": "array", "items": {"type": "String"}, "description": "An array of property names that need to be initialized. Default empty array"}, "receiver": {"type": "String", "description": "The name of the object for which the properties are being initialized."}}, "required": ["statements", "property", "receiver"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"addInitializedPropertyStatements\", \"arguments\": {\"statements\": [\"shapeStatements\"], \"property\": [\"width\", \"height\"], \"receiver\": \"shape\"}}]}", "model_result_decoded": [{"addInitializedPropertyStatements": {"statements": ["shapeStatements"], "property": ["width", "height"], "receiver": "shape"}}], "possible_answer": {"addInitializedPropertyStatements": {"statements": ["shapeStatements"], "property": [["width", "height"], ["height", "width"]], "receiver": ["shape"]}}}
{"id": 41, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'object'. Expected type dict, got str. Parameter value: 'configObject'."], "error_type": "type_error:simple", "prompt": {"id": "javascript_40", "question": "How can I determine the value to be used for a property named 'maxItems' in a configuration object, given that the default value is 10 and the object value 12 , but the configuration object does not explicitly define 'maxItems'?", "function": {"name": "assignOwnDefaults", "description": "This function determines the value to be assigned to a property in an object, preferring the object's own value if it exists and is not undefined, otherwise using a source value.", "parameters": {"type": "dict", "properties": {"objectValue": {"type": "float", "description": "The value of the property in the object."}, "sourceValue": {"type": "float", "description": "The default or source value to use if the object's value is undefined or the object does not have its own property for the key."}, "key": {"type": "String", "description": "The key of the property to check in the object."}, "object": {"type": "dict", "description": "The object to check for the property."}}, "required": ["objectValue", "sourceValue", "key", "object"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"assignOwnDefaults\", \"arguments\": {\"objectValue\": \"12\", \"sourceValue\": \"10\", \"key\": \"maxItems\", \"object\": \"configObject\"}}]}", "model_result_decoded": [{"assignOwnDefaults": {"objectValue": "12", "sourceValue": "10", "key": "maxItems", "object": "configObject"}}], "possible_answer": {"assignOwnDefaults": {"objectValue": [12.0], "sourceValue": [10.0], "key": ["maxItems"], "object": [{}]}}}
{"id": 43, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "javascript_42", "question": "How can I create a task queue with a concurrency of 5, where tasks are functions that log a message to the console, and ensure that when the queue becomes saturated, it logs 'Queue is saturated', and when it becomes unsaturated, it logs 'Queue is unsaturated'?", "function": {"name": "B", "description": "This complex function initializes a task queue with customizable concurrency, task addition, and event handling capabilities. It allows for synchronous and asynchronous task execution, pausing and resuming the queue, and handling various queue events.", "parameters": {"type": "dict", "properties": {"e": {"type": "any", "description": "The initial task or an array of tasks to be added to the queue. Default null"}, "t": {"type": "float", "description": "The concurrency level of the task queue."}, "n": {"type": "float", "description": "The payload size for each task worker. Optional parameter. Default 0.0"}}, "required": ["t"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"B\", \"arguments\": {\"e\": \"function() { console.log('Task 1'); }\", \"t\": \"5\"}}, {\"name\": \"B\", \"arguments\": {\"e\": \"function() { console.log('Task 2'); }\", \"t\": \"5\"}}, {\"name\": \"B\", \"arguments\": {\"e\": \"function() { console.log('Task 3'); }\", \"t\": \"5\"}}, {\"name\": \"B\", \"arguments\": {\"e\": \"function() { console.log('Task 4'); }\", \"t\": \"5\"}}, {\"name\": \"B\", \"arguments\": {\"e\": \"function() { console.log('Task 5'); }\", \"t\": \"5\"}}]}", "model_result_decoded": [{"B": {"e": "function() { console.log('Task 1'); }", "t": "5"}}, {"B": {"e": "function() { console.log('Task 2'); }", "t": "5"}}, {"B": {"e": "function() { console.log('Task 3'); }", "t": "5"}}, {"B": {"e": "function() { console.log('Task 4'); }", "t": "5"}}, {"B": {"e": "function() { console.log('Task 5'); }", "t": "5"}}], "possible_answer": {"B": {"t": [5.0]}}}
{"id": 46, "model_name": "Salesforce_xLAM-1b-fc-r", "test_category": "javascript", "valid": false, "error": ["Incorrect type for parameter 'e'. Expected type String, got dict. Parameter value: {'startingCwd': '/home/user/projects'}."], "error_type": "type_error:js", "prompt": {"id": "javascript_45", "question": "How can I asynchronously retrieve a map of remote Git references and their corresponding commit hashes for a repository URL 'https://github.com/yarnpkg/berry' from a starting directory '/home/user/projects'?", "function": {"name": "Sde", "description": "This asynchronous function retrieves a map of remote Git references and their corresponding commit hashes for a given repository URL, using a specified starting directory.", "parameters": {"type": "dict", "properties": {"t": {"type": "String", "description": "The repository URL."}, "e": {"type": "dict", "properties": {"startingCwd": {"type": "String", "description": "The starting directory from which the Git command is executed."}, "configuration": {"type": "dict", "description": "Additional configuration for the Git command."}}, "description": "The execution context for the Git command.", "required": ["startingCwd"]}}, "required": ["t", "e"]}}}, "model_result_raw": "\n{\"tool_calls\": [{\"name\": \"Sde\", \"arguments\": {\"t\": \"https://github.com/yarnpkg/berry\", \"e\": {\"startingCwd\": \"/home/user/projects\"}}}]}", "model_result_decoded": [{"Sde": {"t": "https://github.com/yarnpkg/berry", "e": {"startingCwd": "/home/user/projects"}}}], "possible_answer": {"Sde": {"t": ["https://github.com/yarnpkg/berry"], "e": [{"startingCwd": ["/home/user/projects"]}]}}}