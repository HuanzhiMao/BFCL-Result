{"accuracy": 0.8775, "correct_count": 351, "total_count": 400}
{"id": 14, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": [{"calculate_area_under_curve": "{\"function\": \"x**2\", \"interval\": [1, 3]}"}], "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 18, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'formatted'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_17", "question": "Find the prime factors of 450", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false. Default is true."}}, "required": ["number", "formatted"]}}}, "model_result_raw": [{"get_prime_factors": "{\"number\": 450}"}], "model_result_decoded": [{"get_prime_factors": {"number": 450}}], "possible_answer": {"get_prime_factors": {"number": [450], "formatted": [true, ""]}}}
{"id": 22, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_21", "question": "Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48.", "function": {"name": "number_theory.gcd", "description": "Compute the greatest common divisor of two given integers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "The first integer."}, "number2": {"type": "integer", "description": "The second integer."}}, "required": ["number1", "number2"]}}}, "model_result_raw": ["```python\nprint(default_api.number_theory_gcd(number1=36, number2=48))\n```"], "possible_answer": {"number_theory.gcd": {"number1": [36], "number2": [48]}}}
{"id": 27, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_26", "question": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "function": {"name": "calculate_velocity", "description": "Calculate the velocity for a certain distance travelled within a specific duration.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled by the object, typically in kilometers."}, "duration": {"type": "integer", "description": "The duration of the journey, typically in hours."}, "unit": {"type": "string", "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."}}, "required": ["distance", "duration"]}}}, "model_result_raw": ["```python\nprint(default_api.calculate_velocity(distance=50, duration=2))\n```"], "possible_answer": {"calculate_velocity": {"distance": [50], "duration": [2], "unit": ["", "km/h"]}}}
{"id": 50, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_49", "question": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm.", "function": {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "dict", "properties": {"atm_pressure": {"type": "integer", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "integer", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}}, "model_result_raw": ["```python\nprint(default_api.calc_absolute_pressure(gauge_pressure=2, atm_pressure=1))\n```"], "possible_answer": {"calc_absolute_pressure": {"atm_pressure": [1], "gauge_pressure": [2]}}}
{"id": 54, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_53", "question": "Retrieve the sequence of DNA molecule with id `DNA123`.", "function": {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "dict", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}}, "model_result_raw": ["```python\nprint(default_api.fetch_DNA_sequence(DNA_id='DNA123'))\n```"], "possible_answer": {"fetch_DNA_sequence": {"DNA_id": ["DNA123"], "format": ["", "fasta"], "upstream": ["", 0]}}}
{"id": 56, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": [{"biology_get_cell_info": "{\"cell_type\": \"human cell\", \"detailed\": true}"}], "model_result_decoded": [{"biology_get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}}
{"id": 57, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_56", "question": "What are the names of proteins found in the plasma membrane?", "function": {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}}, "model_result_raw": ["```python\nprint(default_api.cellbio_get_proteins(cell_compartment='plasma membrane'))\n```"], "possible_answer": {"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": ["", true, false]}}}
{"id": 83, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": [{"calculate_average": "{\"numbers\": [12, 15, 18, 20, 21, 26, 30]}"}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": [{"array_sort": "{\"order\": \"ascending\", \"list\": [5, 3, 4, 1, 2]}"}], "model_result_decoded": [{"array_sort": {"order": "ascending", "list": [5, 3, 4, 1, 2]}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 90, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'conditions'. Expected type dict, got str. Parameter value: 'unknown'."], "error_type": "type_error:simple", "prompt": {"id": "simple_89", "question": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "function": {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}}, "model_result_raw": [{"db_fetch_records": "{\"conditions\": \"unknown\", \"fetch_limit\": null, \"table_name\": \"students\", \"database_name\": \"StudentDB\"}"}], "model_result_decoded": [{"db_fetch_records": {"conditions": "unknown", "fetch_limit": null, "table_name": "students", "database_name": "StudentDB"}}], "possible_answer": {"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}}
{"id": 94, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_93", "question": "Fetch me the list of IMAX movie releases in theaters near LA for the next week.", "function": {"name": "get_theater_movie_releases", "description": "Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the theaters."}, "timeframe": {"type": "integer", "description": "The number of days for which releases are required from current date."}, "format": {"type": "string", "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'"}}, "required": ["location", "timeframe"]}}}, "model_result_raw": ["```python\nprint(default_api.get_theater_movie_releases(location='LA', timeframe=7, format='IMAX'))\n```"], "possible_answer": {"get_theater_movie_releases": {"location": ["LA"], "timeframe": [7], "format": ["IMAX"]}}}
{"id": 95, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'update_info'. Expected type dict, got str. Parameter value: 'unknown'."], "error_type": "type_error:simple", "prompt": {"id": "simple_94", "question": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "function": {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}}, "model_result_raw": [{"update_user_info": "{\"update_info\": \"unknown\", \"user_id\": 43523}"}], "model_result_decoded": [{"update_user_info": {"update_info": "unknown", "user_id": 43523}}], "possible_answer": {"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", ""]}}}
{"id": 104, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_103", "question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": ["```python\nprint(default_api.mathematics_calculate_area_under_curve(limits=[-1, 2], polynomial=[3, 2, -4]))\n```"], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 107, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_106", "question": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.", "function": {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "dict", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}}, "model_result_raw": ["```python\nprint(default_api.train_random_forest_classifier(dataset='your_dataset_name', max_depth=5, n_estimators=100))\n```"], "possible_answer": {"train_random_forest_classifier": {"dataset": ["your_dataset_name"], "max_depth": [5], "n_estimators": [100]}}}
{"id": 110, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_109", "question": "Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data.", "function": {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "dict", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "any", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}}, "model_result_raw": ["```python\nprint(default_api.random_forest_train(data='my_data', max_depth=5, n_estimators=100))\n```"], "possible_answer": {"random_forest.train": {"n_estimators": [100], "max_depth": [5], "data": ["my_data"]}}}
{"id": 123, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_122", "question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": ["```python\nprint(default_api.chi_squared_test(table=[[10, 20], [30, 40]]))\n```"], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 129, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_128", "question": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "function": {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}}, "model_result_raw": "Invalid JSON payload received. Unknown name \"optional\" at 'tools.function_declarations[0].parameters': Cannot find field.", "possible_answer": {"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}}
{"id": 140, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'yearly_yield': 0.05. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"id": "simple_139", "question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": [{"estimate_mutual_fund_return": "{\"investment_amount\": 2000, \"yearly_yield\": 0.05, \"years\": 3}"}], "model_result_decoded": [{"estimate_mutual_fund_return": {"investment_amount": 2000, "yearly_yield": 0.05, "years": 3}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [5], "investment_amount": [2000], "years": [3]}}}
{"id": 167, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fee': 399. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"id": "simple_166", "question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": [{"lawyer_find_nearby": "{\"specialty\": [\"Divorce\"], \"city\": \"Chicago, IL\", \"fee\": 399}"}], "model_result_decoded": [{"lawyer_find_nearby": {"specialty": ["Divorce"], "city": "Chicago, IL", "fee": 399}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}}
{"id": 178, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_177", "question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": ["The available API does not provide information about the type of lawsuit. \n", {"get_lawsuit_cases": "{\"year\": 2018, \"company_name\": \"Facebook\"}"}], "possible_answer": {"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}}
{"id": 184, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_183", "question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": [{"lawsuit_search": "{\"county\": \"Santa Clara\", \"entity\": \"Apple\"}"}], "model_result_decoded": [{"lawsuit_search": {"county": "Santa Clara", "entity": "Apple"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 203, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_202", "question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": ["You did not specify the type of renewable energy source. Please provide this information so I can calculate your potential savings. \n"], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 205, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_204", "question": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}}, "model_result_raw": ["```python\nprint(default_api.restaurant_find_nearby(cuisine='Chinese', location='Seattle, WA', max_distance=10))\n```"], "possible_answer": {"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA"], "cuisine": ["Chinese"], "max_distance": [10]}}}
{"id": 208, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_207", "question": "Get the shortest driving distance between New York, USA and Miami, USA.", "function": {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}}, "model_result_raw": ["```python\nprint(default_api.calculate_shortest_distance(start_location='New York, USA', end_location='Miami, USA', route_preference='Shortest'))\n```"], "possible_answer": {"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL"], "route_preference": ["Shortest"]}}}
{"id": 212, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_211", "question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "Internal error occurred.", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 217, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_216", "question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "Internal error occurred.", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 220, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'brain_region'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_219", "question": "What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?", "function": {"name": "get_neuron_coordinates", "description": "Retrieve the coordinates of the specified neuron in the rat's brain.", "parameters": {"type": "dict", "properties": {"neuron_type": {"type": "string", "description": "Type of neuron to find. For instance, GABA, Glutamate, etc."}, "brain_region": {"type": "string", "description": "The region of the brain to consider.", "default": "All"}}, "required": ["neuron_type", "brain_region"]}}}, "model_result_raw": [{"get_neuron_coordinates": "{\"neuron_type\": \"GABA\"}"}], "model_result_decoded": [{"get_neuron_coordinates": {"neuron_type": "GABA"}}], "possible_answer": {"get_neuron_coordinates": {"neuron_type": ["GABA"], "brain_region": ["All", "all part of the brain", "entire brain"]}}}
{"id": 236, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'Treaty of Lisbon signing'. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon', 'The signing of the Treaty of Lisbon']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": "When was the signing of the Treaty of Lisbon?", "function": {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}}, "model_result_raw": [{"get_event_date": "{\"event\": \"Treaty of Lisbon signing\"}"}], "model_result_decoded": [{"get_event_date": {"event": "Treaty of Lisbon signing"}}], "possible_answer": {"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": [""]}}}
{"id": 239, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 1863. Expected one of [1861]."], "error_type": "value_error:others", "prompt": {"id": "simple_238", "question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": [{"us_history_get_president": "{\"event\": \"American Civil War\", \"year\": 1863}"}], "model_result_decoded": [{"us_history_get_president": {"event": "American Civil War", "year": 1863}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War"], "year": [1861]}}}
{"id": 246, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_245", "question": "Who discovered radium?", "function": {"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}}, "model_result_raw": "Parsing error: {\"candidates\": [{\"finishReason\": \"SAFETY\", \"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"probability\": \"NEGLIGIBLE\", \"probabilityScore\": 0.13574219, \"severity\": \"HARM_SEVERITY_NEGLIGIBLE\", \"severityScore\": 0.071777344}, {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"probability\": \"MEDIUM\", \"blocked\": true, \"probabilityScore\": 0.76953125, \"severity\": \"HARM_SEVERITY_MEDIUM\", \"severityScore\": 0.49023438}, {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"probability\": \"NEGLIGIBLE\", \"probabilityScore\": 0.10839844, \"severity\": \"HARM_SEVERITY_NEGLIGIBLE\", \"severityScore\": 0.060058594}, {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"probability\": \"NEGLIGIBLE\", \"probabilityScore\": 0.07470703, \"severity\": \"HARM_SEVERITY_NEGLIGIBLE\", \"severityScore\": 0.057373047}]}], \"usageMetadata\": {\"promptTokenCount\": 105, \"totalTokenCount\": 105}}", "possible_answer": {"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}}
{"id": 250, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": [{"religion_history_info": "{\"till_century\": 14, \"religion\": \"Christianity\", \"include_people\": true}"}], "model_result_decoded": [{"religion_history_info": {"till_century": 14, "religion": "Christianity", "include_people": true}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}}
{"id": 261, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'exclusion'. Expected type dict, got str. Parameter value: 'unknown'."], "error_type": "type_error:simple", "prompt": {"id": "simple_260", "question": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.", "function": {"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}}, "model_result_raw": [{"paint_requirement_calculate": "{\"exclusion\": \"unknown\", \"paint_coverage\": 350, \"area\": \"unknown\"}"}], "model_result_decoded": [{"paint_requirement_calculate": {"exclusion": "unknown", "paint_coverage": 350, "area": "unknown"}}], "possible_answer": {"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}}
{"id": 268, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'february'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": [{"find_exhibition": "{\"location\": \"New York City, NY\", \"art_form\": \"modern sculpture\", \"user_ratings\": \"high\", \"month\": \"february\"}"}], "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "modern sculpture", "user_ratings": "high", "month": "february"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 281, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_280", "question": "Find an acoustic instrument within my budget of $1000.", "function": {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}}, "model_result_raw": ["What type of acoustic instrument are you looking for? \n"], "possible_answer": {"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": [""]}}}
{"id": 285, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_284", "question": "Get information about the pop concerts in New York for next month.", "function": {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}}, "model_result_raw": ["I can't fulfill this request. The available tool `concert_info_get` doesn't allow to specify a time frame like \"next month\".  It only accepts a specific date. \n"], "possible_answer": {"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}}
{"id": 298, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_297", "question": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])", "function": {"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}}, "model_result_raw": ["```python\nprint(default_api.music_theory_chordProgression(progression=['I', 'V', 'vi', 'IV']))\n```"], "possible_answer": {"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}}
{"id": 317, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'female'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_316", "question": "Find the current world rank of a Tennis player, Serena Williams.", "function": {"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}}, "model_result_raw": [{"get_sport_ranking": "{\"player_name\": \"Serena Williams\", \"gender\": \"female\", \"sport\": \"Tennis\"}"}], "model_result_decoded": [{"get_sport_ranking": {"player_name": "Serena Williams", "gender": "female", "sport": "Tennis"}}], "possible_answer": {"get_sport_ranking": {"sport": ["Tennis"], "player_name": ["Serena Williams"], "gender": ["", "all"]}}}
{"id": 328, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_327", "question": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "function": {"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}}, "model_result_raw": ["```python\nprint(default_api.sports_team_get_schedule(league='Premier League', num_of_games=6, team_name='Manchester United'))\n```"], "possible_answer": {"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}}
{"id": 355, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cooking_time': 25. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"id": "simple_354", "question": "Find a vegan soup recipe that takes under 30 minutes to make.", "function": {"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "dict", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."}}, "required": ["dish_type", "cooking_time"]}}}, "model_result_raw": [{"get_vegan_recipe": "{\"dish_type\": \"soup\", \"cooking_time\": 25}"}], "model_result_decoded": [{"get_vegan_recipe": {"dish_type": "soup", "cooking_time": 25}}], "possible_answer": {"get_vegan_recipe": {"dish_type": ["soup"], "cooking_time": [30], "ingredient_preference": [""]}}}
{"id": 368, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}}, "model_result_raw": [{"find_recipe": "{\"recipe_type\": \"brownies\", \"dietary_restrictions\": \"vegan\", \"time\": 25}"}], "model_result_decoded": [{"find_recipe": {"recipe_type": "brownies", "dietary_restrictions": "vegan", "time": 25}}], "possible_answer": {"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}}
{"id": 374, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'pack_size'. Expected outer type array with inner type <class 'int'>. Parameter value: [None, None, 12]."], "error_type": "type_error:nested", "prompt": {"id": "simple_373", "question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": [{"walmart_purchase": "{\"product_list\": [\"apples\", \"rice\", \"bottled water\"], \"pack_size\": [null, null, 12], \"loc\": \"San Jose\"}"}], "model_result_decoded": [{"walmart_purchase": {"product_list": ["apples", "rice", "bottled water"], "pack_size": [null, null, 12], "loc": "San Jose"}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": [{"walmart_check_price": "{\"quantities\": [3, 24], \"items\": [\"pumpkin\", \"eggs\"]}"}], "model_result_decoded": [{"walmart_check_price": {"quantities": [3, 24], "items": ["pumpkin", "eggs"]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 377, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Optional parameter 'display_format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_376", "question": "What time is it currently in London, UK in 24 hour format?", "function": {"name": "time_zone_converter", "description": "Retrieve the current time of a specific city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city you want to know the current time for."}, "country": {"type": "string", "description": "The country where the city is located."}, "display_format": {"type": "string", "description": "The time display format: '12h' or '24h'. Default is '24h'."}}, "required": ["city", "country"]}}}, "model_result_raw": [{"time_zone_converter": "{\"city\": \"London\", \"country\": \"UK\"}"}], "model_result_decoded": [{"time_zone_converter": {"city": "London", "country": "UK"}}], "possible_answer": {"time_zone_converter": {"city": ["London"], "country": ["UK", "United Kingdom"], "display_format": ["24h", "24 hour"]}}}
{"id": 383, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": [{"book_hotel": "{\"hotel_name\": \"Hilton Hotel\", \"room_type\": \"single\", \"start_date\": \"10th December 2022\", \"nights\": 2, \"location\": \"Chicago\"}"}], "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "room_type": "single", "start_date": "10th December 2022", "nights": 2, "location": "Chicago"}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 388, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_387", "question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": ["```python\nprint(default_api.hotel_booking(hotel_name='Plaza Hotel', location='New York, NY', start_date='2022-06-01', end_date='2022-06-04'))\n```"], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}}
{"id": 389, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'US dollar'. Expected one of ['USD']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_388", "question": "How many Canadian dollars can I get for 500 US dollars?", "function": {"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "integer", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": [{"currency_exchange_convert": "{\"base_currency\": \"US dollar\", \"target_currency\": \"Canadian dollar\", \"amount\": 500}"}], "model_result_decoded": [{"currency_exchange_convert": {"base_currency": "US dollar", "target_currency": "Canadian dollar", "amount": 500}}], "possible_answer": {"currency_exchange.convert": {"base_currency": ["USD"], "target_currency": ["CAD"], "amount": [500]}}}
{"id": 390, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_389", "question": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "function": {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": ["I need the exchange rate between US dollars and British pounds to do the calculation. \n", {"currency_converter": "{\"base_currency\": \"USD\", \"amount\": 200, \"target_currency\": \"GBP\"}"}], "possible_answer": {"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}}
{"id": 394, "model_name": "gemini-1.5-pro-preview-0514", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'target_currency': 'United States Dollar'. Expected one of ['USD']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_393", "question": "How much will 20000 Japanese Yen be in United States Dollar?", "function": {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": [{"convert_currency": "{\"target_currency\": \"United States Dollar\", \"amount\": 20000, \"base_currency\": \"Japanese Yen\"}"}], "model_result_decoded": [{"convert_currency": {"target_currency": "United States Dollar", "amount": 20000, "base_currency": "Japanese Yen"}}], "possible_answer": {"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}}