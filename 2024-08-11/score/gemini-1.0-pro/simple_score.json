{"accuracy": 0.915, "correct_count": 366, "total_count": 400}
{"id": 14, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": [{"calculate_area_under_curve": "{\"interval\": [1, 3], \"function\": \"x^2\"}"}], "model_result_decoded": [{"calculate_area_under_curve": {"interval": [1, 3], "function": "x^2"}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 51, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'substance': 'Water'. Expected one of ['ice']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_50", "question": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?", "function": {"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}}, "model_result_raw": [{"entropy_change_calculate": "{\"mass\": 1, \"substance\": \"Water\", \"final_temperature\": 100, \"pressure\": 1, \"initial_temperature\": 0}"}], "model_result_decoded": [{"entropy_change_calculate": {"mass": 1, "substance": "Water", "final_temperature": 100, "pressure": 1, "initial_temperature": 0}}], "possible_answer": {"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}}
{"id": 66, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'land_area': 8515767. Expected one of [8500000]."], "error_type": "value_error:others", "prompt": {"id": "simple_65", "question": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers.", "function": {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}}, "model_result_raw": [{"calculate_density": "{\"land_area\": 8515767, \"population\": 213000000, \"year\": \"2022\", \"country\": \"Brazil\"}"}], "model_result_decoded": [{"calculate_density": {"land_area": 8515767, "population": 213000000, "year": "2022", "country": "Brazil"}}], "possible_answer": {"calculate_density": {"country": ["Brazil"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}}
{"id": 83, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": [{"calculate_average": "{\"numbers\": [12, 15, 18, 20, 21, 26, 30]}"}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": [{"array_sort": "{\"list\": [5, 3, 4, 1, 2], \"order\": \"ascending\"}"}], "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 90, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table_name': 'Student'. Expected one of ['students']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_89", "question": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "function": {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}}, "model_result_raw": [{"db_fetch_records": "{\"table_name\": \"Student\", \"database_name\": \"StudentDB\", \"conditions\": {\"school\": \"Bluebird High School\", \"department\": \"Science\"}}"}], "model_result_decoded": [{"db_fetch_records": {"table_name": "Student", "database_name": "StudentDB", "conditions": {"school": "Bluebird High School", "department": "Science"}}}], "possible_answer": {"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}}
{"id": 100, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'end_range'. Expected type float, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "simple_99", "question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": [{"plot_sine_wave": "{\"frequency\": 5, \"end_range\": null, \"start_range\": 0}"}], "model_result_decoded": [{"plot_sine_wave": {"frequency": 5, "end_range": null, "start_range": 0}}], "possible_answer": {"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 104, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'limits'. Expected outer type array with inner type <class 'float'>. Parameter value: [-1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": [{"mathematics_calculate_area_under_curve": "{\"limits\": [-1, 2], \"polynomial\": [3, 2, -4]}"}], "model_result_decoded": [{"mathematics_calculate_area_under_curve": {"limits": [-1, 2], "polynomial": [3, 2, -4]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 129, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_128", "question": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "function": {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}}, "model_result_raw": "Invalid JSON payload received. Unknown name \"optional\" at 'tools.function_declarations[0].parameters': Cannot find field.", "possible_answer": {"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}}
{"id": 133, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'shareholder_equity': 0. Expected one of [10000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_132", "question": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "function": {"name": "calculate_return_on_equity", "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.", "parameters": {"type": "dict", "properties": {"net_income": {"type": "integer", "description": "The company's net income."}, "shareholder_equity": {"type": "integer", "description": "The company's total shareholder's equity."}, "dividends_paid": {"type": "integer", "description": "The total dividends paid by the company. Optional. If not given, default to 0."}}, "required": ["net_income", "shareholder_equity"]}}}, "model_result_raw": [{"calculate_return_on_equity": "{\"shareholder_equity\": 0, \"net_income\": 0, \"dividends_paid\": 0}"}], "model_result_decoded": [{"calculate_return_on_equity": {"shareholder_equity": 0, "net_income": 0, "dividends_paid": 0}}], "possible_answer": {"calculate_return_on_equity": {"net_income": [2000000], "shareholder_equity": [10000000], "dividends_paid": [200000]}}}
{"id": 140, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'yearly_yield': 0.05. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"id": "simple_139", "question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": [{"estimate_mutual_fund_return": "{\"years\": 3, \"yearly_yield\": 0.05, \"investment_amount\": 2000}"}], "model_result_decoded": [{"estimate_mutual_fund_return": {"years": 3, "yearly_yield": 0.05, "investment_amount": 2000}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [5], "investment_amount": [2000], "years": [3]}}}
{"id": 164, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'address': '123 Main St'. Expected one of ['123 main street']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_163", "question": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.", "function": {"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}}, "model_result_raw": [{"property_records_get": "{\"address\": \"123 Main St\", \"parcel_number\": \"1234567890\", \"include_owner\": true, \"county\": \"Santa Clara\"}"}], "model_result_decoded": [{"property_records_get": {"address": "123 Main St", "parcel_number": "1234567890", "include_owner": true, "county": "Santa Clara"}}], "possible_answer": {"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}}
{"id": 178, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'open'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": [{"get_lawsuit_cases": "{\"company_name\": \"Facebook\", \"year\": 2018, \"status\": \"open\"}"}], "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "open"}}], "possible_answer": {"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}}
{"id": 184, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_183", "question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": [{"lawsuit_search": "{\"county\": \"Santa Clara\", \"entity\": \"Apple\"}"}], "model_result_decoded": [{"lawsuit_search": {"county": "Santa Clara", "entity": "Apple"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 201, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_type': 'gasoline'. Expected one of ['gas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_200", "question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": [{"calculate_emissions": "{\"distance\": 12000, \"fuel_efficiency\": 25, \"fuel_type\": \"gasoline\"}"}], "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_efficiency": 25, "fuel_type": "gasoline"}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 25.0], "efficiency_reduction": [0, ""]}}}
{"id": 212, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_211", "question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "Internal error occurred.", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 217, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_216", "question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "Internal error occurred.", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 232, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'event_type'. Expected type array, got str. Parameter value: 'War'."], "error_type": "type_error:simple", "prompt": {"id": "simple_231", "question": "Provide key war events in German history from 1871 to 1945.", "function": {"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. Default to 'all', which all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}}, "model_result_raw": [{"history_get_key_events": "{\"end_year\": 1945, \"event_type\": \"War\", \"start_year\": 1871, \"country\": \"Germany\"}"}], "model_result_decoded": [{"history_get_key_events": {"end_year": 1945, "event_type": "War", "start_year": 1871, "country": "Germany"}}], "possible_answer": {"history.get_key_events": {"country": ["Germany", "DE"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}}
{"id": 245, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}}, "model_result_raw": [{"publication_year_find": "{\"work_title\": \"Philosophi\\u00e6 Naturalis Principia Mathematica\", \"author\": \"Isaac Newton\"}"}], "model_result_decoded": [{"publication_year_find": {"work_title": "Philosophi\u00e6 Naturalis Principia Mathematica", "author": "Isaac Newton"}}], "possible_answer": {"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}}
{"id": 246, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_245", "question": "Who discovered radium?", "function": {"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}}, "model_result_raw": "Parsing error: {\"candidates\": [{\"finishReason\": \"SAFETY\", \"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"probability\": \"NEGLIGIBLE\", \"probabilityScore\": 0.13637818, \"severity\": \"HARM_SEVERITY_NEGLIGIBLE\", \"severityScore\": 0.06979492}, {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"probability\": \"MEDIUM\", \"blocked\": true, \"probabilityScore\": 0.7285552, \"severity\": \"HARM_SEVERITY_MEDIUM\", \"severityScore\": 0.45280817}, {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"probability\": \"NEGLIGIBLE\", \"probabilityScore\": 0.10576342, \"severity\": \"HARM_SEVERITY_NEGLIGIBLE\", \"severityScore\": 0.060086653}, {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"probability\": \"NEGLIGIBLE\", \"probabilityScore\": 0.07423137, \"severity\": \"HARM_SEVERITY_NEGLIGIBLE\", \"severityScore\": 0.0575992}]}], \"usageMetadata\": {\"promptTokenCount\": 105, \"totalTokenCount\": 105}}", "possible_answer": {"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}}
{"id": 250, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": [{"religion_history_info": "{\"include_people\": true, \"religion\": \"Christianity\", \"till_century\": 14}"}], "model_result_decoded": [{"religion_history_info": {"include_people": true, "religion": "Christianity", "till_century": 14}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}}
{"id": 260, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'length': 12. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"id": "simple_259", "question": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "function": {"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "dict", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}}, "model_result_raw": [{"calculate_paint_needed": "{\"coverage_rate\": 400, \"length\": 12, \"height\": 30}"}], "model_result_decoded": [{"calculate_paint_needed": {"coverage_rate": 400, "length": 12, "height": 30}}], "possible_answer": {"calculate_paint_needed": {"coverage_rate": [400], "length": [30], "height": [12]}}}
{"id": 268, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": [{"find_exhibition": "{\"user_ratings\": \"high\", \"month\": \"upcoming\", \"art_form\": \"sculpture\", \"location\": \"New York City, NY\"}"}], "model_result_decoded": [{"find_exhibition": {"user_ratings": "high", "month": "upcoming", "art_form": "sculpture", "location": "New York City, NY"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 279, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Optional parameter 'features' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_278", "question": "Find me the average price and ratings of piano from Yamaha.", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}}, "model_result_raw": [{"get_instrument_details": "{\"instrument\": \"piano\", \"manufacturer\": \"Yamaha\"}"}], "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha"}}], "possible_answer": {"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}}
{"id": 281, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_280", "question": "Find an acoustic instrument within my budget of $1000.", "function": {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}}, "model_result_raw": ["What type of instrument are you looking for? \n"], "possible_answer": {"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": [""]}}}
{"id": 298, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'str' object has no attribute 'keys'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_297", "question": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])", "function": {"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}}, "model_result_raw": ["Parsing error: {\"args\": {\"progression\": [\"I\", \"V\", \"vi\", \"IV\"]}}"], "possible_answer": {"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}}
{"id": 309, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': 'Premier League'. Expected one of ['English Premier League', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_308", "question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": [{"sports_match_schedule": "{\"league\": \"Premier League\", \"team_name\": \"Manchester United\", \"num_matches\": 5}"}], "model_result_decoded": [{"sports_match_schedule": {"league": "Premier League", "team_name": "Manchester United", "num_matches": 5}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}}
{"id": 324, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'woman'. Expected one of ['women']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_323", "question": "Who is ranked as the top player in woman tennis?", "function": {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}}, "model_result_raw": [{"sports_ranking_get_top_player": "{\"sport\": \"tennis\", \"gender\": \"woman\"}"}], "model_result_decoded": [{"sports_ranking_get_top_player": {"sport": "tennis", "gender": "woman"}}], "possible_answer": {"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}}
{"id": 356, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': 'Beef Lasagna Recipe'. Expected one of ['Beef Lasagna']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_355", "question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}}, "model_result_raw": [{"recipe_info_get_calories": "{\"recipe\": \"Beef Lasagna Recipe\", \"website\": \"Foodnetwork.com\"}"}], "model_result_decoded": [{"recipe_info_get_calories": {"recipe": "Beef Lasagna Recipe", "website": "Foodnetwork.com"}}], "possible_answer": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}}
{"id": 371, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": [{"safeway_order": "{\"items\": [\"olive oil\", \"rice\"], \"quantity\": [3, 5], \"location\": \"Palo Alto, CA\"}"}], "model_result_decoded": [{"safeway_order": {"items": ["olive oil", "rice"], "quantity": [3, 5], "location": "Palo Alto, CA"}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'pack_size': [12]. Expected one of [[1, 1, 12]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": [{"walmart_purchase": "{\"loc\": \"San Jose\", \"pack_size\": [12], \"product_list\": [\"apples\", \"rice\", \"bottled water\"]}"}], "model_result_decoded": [{"walmart_purchase": {"loc": "San Jose", "pack_size": [12], "product_list": ["apples", "rice", "bottled water"]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'store_location': 'all'. Expected one of ['Los Angeles', 'LA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_375", "question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": [{"walmart_check_price": "{\"items\": [\"pumpkins\", \"eggs\"], \"quantities\": [3, 2], \"store_location\": \"all\"}"}], "model_result_decoded": [{"walmart_check_price": {"items": ["pumpkins", "eggs"], "quantities": [3, 2], "store_location": "all"}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 395, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_location': 'Louvre Museum, Paris'. Expected one of ['Louvre Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_394", "question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": [{"maps_get_distance_duration": "{\"end_location\": \"Louvre Museum, Paris\", \"start_location\": \"Eiffel Tower, Paris\"}"}], "model_result_decoded": [{"maps_get_distance_duration": {"end_location": "Louvre Museum, Paris", "start_location": "Eiffel Tower, Paris"}}], "possible_answer": {"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}}
{"id": 396, "model_name": "gemini-1.0-pro", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Central Park, New York'. Expected one of ['Central Park, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_395", "question": "Find the nearest parking lot within 2 miles of Central Park in New York.", "function": {"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}}, "model_result_raw": [{"parking_lot_find_nearest": "{\"location\": \"Central Park, New York\", \"radius\": 2}"}], "model_result_decoded": [{"parking_lot_find_nearest": {"location": "Central Park, New York", "radius": 2}}], "possible_answer": {"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}}